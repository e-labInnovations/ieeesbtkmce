{"version":3,"file":"blocks/services-item/index.js","mappings":";;;;;;;;;;;;;;;;;AAAgC;AACL;;AAE3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,0CAAM;AACd;AACA;AACA;AACA;AACA;AACA,SAAS,6CAAK;AACd;AACA;AACA;AACA;AACA;AACA,2DAA2D,MAAM;AACjE;AACA;AACA;AACA;;AAEuB;AACvB;;;;;;;;;;;;;;;;;AC1CA;AACO,MAAMA,KAAK,GAAG,CAClB,4hLAA2hL,EAC3hL,ijOAAgjO,EAChjO,i0MAAg0M,EACh0M,krLAAirL,EACjrL,+5PAA85P,EAC95P,i0GAAg0G,EACh0G,4sMAA2sM,EAC3sM,urMAAsrM,CACxrM;AAEM,MAAMC,MAAM,GAAG,CACpB;EAAEC,IAAI,EAAE,WAAW;EAAEC,KAAK,EAAE;AAAU,CAAC,EACvC;EAAED,IAAI,EAAE,YAAY;EAAEC,KAAK,EAAE;AAAU,CAAC,EACxC;EAAED,IAAI,EAAE,UAAU;EAAEC,KAAK,EAAE;AAAU,CAAC,EACtC;EAAED,IAAI,EAAE,aAAa;EAAEC,KAAK,EAAE;AAAU,CAAC,EACzC;EAAED,IAAI,EAAE,WAAW;EAAEC,KAAK,EAAE;AAAU,CAAC,EACvC;EAAED,IAAI,EAAE,aAAa;EAAEC,KAAK,EAAE;AAAU,CAAC,EACzC;EAAED,IAAI,EAAE,aAAa;EAAEC,KAAK,EAAE;AAAU,CAAC,EACzC;EAAED,IAAI,EAAE,aAAa;EAAEC,KAAK,EAAE;AAAU,CAAC,EACzC;EAAED,IAAI,EAAE,cAAc;EAAEC,KAAK,EAAE;AAAU,CAAC,EAC1C;EAAED,IAAI,EAAE,UAAU;EAAEC,KAAK,EAAE;AAAU,CAAC,EACtC;EAAED,IAAI,EAAE,UAAU;EAAEC,KAAK,EAAE;AAAU,CAAC,EACtC;EAAED,IAAI,EAAE,WAAW;EAAEC,KAAK,EAAE;AAAU,CAAC,EACvC;EAAED,IAAI,EAAE,gBAAgB;EAAEC,KAAK,EAAE;AAAU,CAAC,EAC5C;EAAED,IAAI,EAAE,OAAO;EAAEC,KAAK,EAAE;AAAU,CAAC,EACnC;EAAED,IAAI,EAAE,QAAQ;EAAEC,KAAK,EAAE;AAAU,CAAC,EACpC;EAAED,IAAI,EAAE,eAAe;EAAEC,KAAK,EAAE;AAAU,CAAC,EAC3C;EAAED,IAAI,EAAE,UAAU;EAAEC,KAAK,EAAE;AAAU,CAAC,EACtC;EAAED,IAAI,EAAE,aAAa;EAAEC,KAAK,EAAE;AAAU,CAAC,EACzC;EAAED,IAAI,EAAE,gBAAgB;EAAEC,KAAK,EAAE;AAAU,CAAC,EAC5C;EAAED,IAAI,EAAE,YAAY;EAAEC,KAAK,EAAE;AAAU,CAAC,EACxC;EAAED,IAAI,EAAE,YAAY;EAAEC,KAAK,EAAE;AAAU,CAAC,EACxC;EAAED,IAAI,EAAE,MAAM;EAAEC,KAAK,EAAE;AAAU,CAAC,CACnC;;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjCiC;AACV;AAOQ;AACM;AACgB;AACrD,MAAM;EAAEY;AAAS,CAAC,GAAGC,EAAE,CAACC,OAAO;AACgB;AACR;AAExB,SAASE,IAAIA,CAAC;EAAEC,UAAU;EAAEC;AAAc,CAAC,EAAE;EAC1D,MAAM;IAAEC,KAAK;IAAEC,OAAO;IAAEC,IAAI;IAAErB;EAAM,CAAC,GAAGiB,UAAU;EAClD,MAAMK,UAAU,GAAGnB,sEAAa,CAAC;IAC/BoB,SAAS,EAAE;EACb,CAAC,CAAC;EAEFR,6DAAS,CAAC,MAAM;IACdS,eAAe,CAACH,IAAI,CAAC;EACvB,CAAC,EAAE,CAACrB,KAAK,CAAC,CAAC;EAEX,MAAMwB,eAAe,GAAG,MAAOC,MAAM,IAAK;IACxC,IAAIC,UAAU,GAAG,MAAMf,mEAAW,CAACc,MAAM,CAAC;IAC1C,IAAI,CAACC,UAAU,EAAE;MACfC,KAAK,CAAC,sCAAsC,CAAC;MAC7C;IACF;IAEAD,UAAU,GAAGE,SAAS,CAACF,UAAU,EAAE1B,KAAK,CAAC;IACzCkB,aAAa,CAAC;MAAEG,IAAI,EAAEK;IAAW,CAAC,CAAC;EACrC,CAAC;EAED,SAASE,SAASA,CAACC,SAAS,EAAE7B,KAAK,EAAE;IACnC;IACA,MAAM8B,MAAM,GAAG,IAAIC,SAAS,CAAC,CAAC;IAC9B,MAAMC,GAAG,GAAGF,MAAM,CAACG,eAAe,CAACJ,SAAS,EAAE,eAAe,CAAC;;IAE9D;IACAG,GAAG,CAACE,eAAe,CAACC,eAAe,CAAC,OAAO,CAAC;IAC5CH,GAAG,CAACE,eAAe,CAACC,eAAe,CAAC,QAAQ,CAAC;;IAE7C;IACA,MAAMC,gBAAgB,GAAGJ,GAAG,CAACK,gBAAgB,CAAC,QAAQ,CAAC;IACvDD,gBAAgB,CAACE,OAAO,CAAExB,OAAO,IAAK;MACpCA,OAAO,CAACyB,YAAY,CAAC,MAAM,EAAEvC,KAAK,CAAC;IACrC,CAAC,CAAC;;IAEF;IACA,MAAMwC,UAAU,GAAG,IAAIC,aAAa,CAAC,CAAC;IACtC,MAAMC,iBAAiB,GAAGF,UAAU,CAACG,iBAAiB,CAACX,GAAG,CAAC;IAE3D,OAAOU,iBAAiB;EAC1B;EAEA,OACEE,oDAAA,CAAChC,QAAQ,QACPgC,oDAAA,CAAC3C,sEAAiB,QAChB2C,oDAAA,CAACxC,4DAAS;IAACe,KAAK,EAAET,mDAAE,CAAC,OAAO;EAAE,GAC5BkC,oDAAA,CAACtC,+DAAY;IACXR,MAAM,EAAEA,yCAAO;IACf+C,KAAK,EAAE7C,KAAM;IACb8C,QAAQ,EAAG9C,KAAK,IAAKkB,aAAa,CAAC;MAAElB;IAAM,CAAC;EAAE,CAC/C,CACQ,CAAC,EACZ4C,oDAAA,CAACxC,4DAAS;IAACe,KAAK,EAAET,mDAAE,CAAC,MAAM;EAAE,GAC3BkC,oDAAA,CAACnC,qEAAI;IAACsC,OAAO,EAAE;EAAE,GACdlD,wCAAK,CAACmD,GAAG,CAAEC,KAAK,IAAK;IACpB,OACEL,oDAAA,CAACvC,yDAAM;MACL6C,OAAO,EAAEA,CAAA,KAAM1B,eAAe,CAACyB,KAAK,CAAE;MACtCE,KAAK,EAAE;QAAEC,MAAM,EAAE,MAAM;QAAEC,eAAe,EAAE;MAAQ;IAAE,GAEpDT,oDAAA;MACEU,GAAG,EAAG,2BAA0BC,kBAAkB,CAACN,KAAK,CAAE,EAAE;MAC5DE,KAAK,EAAE;QAAEK,KAAK,EAAE,MAAM;QAAEC,MAAM,EAAE;MAAO,CAAE;MACzCC,GAAG,EAAEvC;IAAM,CACZ,CACK,CAAC;EAEb,CAAC,CACG,CAAC,EAEPyB,oDAAA,CAACrC,kEAAe;IACdoD,KAAK,EAAC,eAAe;IACrBC,IAAI,EAAC,0BAA0B;IAC/Bf,KAAK,EAAExB,IAAK;IACZyB,QAAQ,EAAEtB;EAAgB,CAC3B,CAAC,EACFoB,oDAAA;IACEU,GAAG,EAAG,2BAA0BC,kBAAkB,CAAClC,IAAI,CAAE,EAAE;IAC3DmC,KAAK,EAAC,KAAK;IACXE,GAAG,EAAEvC;EAAM,CACZ,CACQ,CACM,CAAC,EAEpByB,oDAAA;IAAA,GAAStB;EAAU,GACjBsB,oDAAA;IAAIrB,SAAS,EAAC,UAAU;IAAC4B,KAAK,EAAE;MAAEE,eAAe,EAAErD;IAAM;EAAE,CAAE,CAAC,EAC9D4C,oDAAA;IAAKrB,SAAS,EAAC;EAAW,GACxBqB,oDAAA,CAAC1C,6DAAQ;IACPqB,SAAS,EAAC,6FAA6F;IACvGsC,OAAO,EAAC,IAAI;IACZhB,KAAK,EAAE1B,KAAM;IACb2C,cAAc,EAAE,EAAG;IACnBhB,QAAQ,EAAG3B,KAAK,IAAKD,aAAa,CAAC;MAAEC;IAAM,CAAC,CAAE;IAC9C4C,WAAW,EAAErD,mDAAE,CAAC,UAAU;EAAE,CAC7B,CAAC,EACFkC,oDAAA;IAAKrB,SAAS,EAAC;EAAM,GACnBqB,oDAAA;IACEU,GAAG,EAAG,2BAA0BC,kBAAkB,CAAClC,IAAI,CAAE,EAAE;IAC3DE,SAAS,EAAC,WAAW;IACrBmC,GAAG,EAAEvC;EAAM,CACZ,CACE,CACF,CAAC,EACNyB,oDAAA,CAAC1C,6DAAQ;IACPqB,SAAS,EAAC,+CAA+C;IACzDsC,OAAO,EAAC,GAAG;IACXhB,KAAK,EAAEzB,OAAQ;IACf0C,cAAc,EAAE,EAAG;IACnBhB,QAAQ,EAAG1B,OAAO,IAAKF,aAAa,CAAC;MAAEE;IAAQ,CAAC,CAAE;IAClD2C,WAAW,EAAErD,mDAAE,CAAC,YAAY;EAAE,CAC/B,CACE,CACG,CAAC;AAEf;;;;;;;;;;;;;;;;;;ACtIsD;AAClB;AACV;AACA;AACJ;AAEtB,MAAMO,UAAU,GAAG;EACjBE,KAAK,EAAE;IACLgD,IAAI,EAAE,QAAQ;IACdC,MAAM,EAAE,MAAM;IACdC,QAAQ,EAAE;EACZ,CAAC;EACDjD,OAAO,EAAE;IACP+C,IAAI,EAAE,QAAQ;IACdC,MAAM,EAAE,MAAM;IACdC,QAAQ,EAAE,GAAG;IACbC,OAAO,EACL;EACJ,CAAC;EACDjD,IAAI,EAAE;IACJ8C,IAAI,EAAE,QAAQ;IACdG,OAAO,EAAG;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,CAAC;EACDtE,KAAK,EAAE;IACLmE,IAAI,EAAE,QAAQ;IACdG,OAAO,EAAE;EACX;AACF,CAAC;AAEDN,oEAAiB,CAACC,wCAAQ,EAAE;EAC1BhD,UAAU;EACVsD,IAAI,EAAEvD,6CAAI;EACVwD,IAAI,EAAEN,6CAAIA;AACZ,CAAC,CAAC;;;;;;;;;;;;;;;;;;;;AC1CiD;AAEpC,SAASM,IAAIA,CAAC;EAAEvD;AAAW,CAAC,EAAE;EAC3C,MAAM;IAAEE,KAAK;IAAEC,OAAO;IAAEC,IAAI;IAAErB;EAAM,CAAC,GAAGiB,UAAU;EAElD,OACE2B,oDAAA;IAAKrB,SAAS,EAAC;EAAyB,GACtCqB,oDAAA;IAAIrB,SAAS,EAAC,UAAU;IAAC4B,KAAK,EAAE;MAAEE,eAAe,EAAErD;IAAM;EAAE,CAAE,CAAC,EAC9D4C,oDAAA;IAAKrB,SAAS,EAAC;EAAW,GACxBqB,oDAAA,CAAC1C,6DAAQ,CAACuE,OAAO;IACfZ,OAAO,EAAC,IAAI;IACZhB,KAAK,EAAE1B,KAAM;IACbI,SAAS,EAAC;EAA6F,CACxG,CAAC,EACFqB,oDAAA;IAAKrB,SAAS,EAAC;EAAM,GACnBqB,oDAAA;IACEU,GAAG,EAAG,2BAA0BC,kBAAkB,CAAClC,IAAI,CAAE,EAAE;IAC3DE,SAAS,EAAC,WAAW;IACrBmC,GAAG,EAAEvC;EAAM,CACZ,CACE,CACF,CAAC,EACNyB,oDAAA,CAAC1C,6DAAQ,CAACuE,OAAO;IACfZ,OAAO,EAAC,GAAG;IACXhB,KAAK,EAAEzB,OAAQ;IACfG,SAAS,EAAC;EAA+C,CAC1D,CACE,CAAC;AAEV;;;;;;;;;;;AC7BY;;AAEZ,kBAAkB;AAClB,mBAAmB;AACnB,qBAAqB;;AAErB;AACA;AACA;;AAEA;AACA,mCAAmC,SAAS;AAC5C;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,cAAc,SAAS;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,sBAAsB,SAAS;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,2CAA2C,UAAU;AACrD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;;;;;ACrJA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEY;;AAEZ,aAAa,mBAAO,CAAC,oDAAW;AAChC,cAAc,mBAAO,CAAC,gDAAS;AAC/B;AACA;AACA;AACA;;AAEA,cAAc;AACd,kBAAkB;AAClB,yBAAyB;;AAEzB;AACA,kBAAkB;;AAElB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,kBAAkB,mBAAmB;AACrC;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kBAAkB,YAAY;AAC9B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAI;AACJ;AACA,IAAI;AACJ;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA,wCAAwC,SAAS;AACjD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,iBAAiB;AACjC;AACA;AACA;;AAEA;AACA;AACA,cAAc,iBAAiB;AAC/B;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,kBAAkB,SAAS;AAC3B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,kBAAkB,SAAS;AAC3B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,kBAAkB,SAAS;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iDAAiD,EAAE;AACnD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,kBAAkB,SAAS;AAC3B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;AACA,yBAAyB,eAAe;AACxC;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA,yBAAyB,QAAQ;AACjC;AACA,sBAAsB,eAAe;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,kBAAkB,YAAY;AAC9B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,sBAAsB,SAAS;AAC/B;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,sBAAsB,SAAS;AAC/B;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,sBAAsB,SAAS;AAC/B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,kBAAkB,sBAAsB;AACxC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAI;AACJ;AACA;;AAEA;AACA;AACA;AACA,IAAI;AACJ;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,mBAAmB;AACnB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA,IAAI;AACJ;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA,oBAAoB,SAAS;AAC7B;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,iBAAiB;AACjC;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,kBAAkB,YAAY;AAC9B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,kBAAkB,gBAAgB;AAClC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,kBAAkB,gBAAgB;AAClC;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,kBAAkB,YAAY;AAC9B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,kBAAkB,QAAQ;AAC1B;AACA,oBAAoB,QAAQ;AAC5B;AACA;AACA;AACA;AACA,CAAC;;;;;;;;;;;;ACxxDY;;AAEb,kBAAkB,mBAAO,CAAC,oEAAa;AACvC,kBAAkB,mBAAO,CAAC,wFAAuB;AACjD,mBAAmB,mBAAO,CAAC,wFAAuB;;AAElD;AACA;AACA;AACA;AACA;;;;;;;;;;;ACVa;;AAEb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,aAAa;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,eAAe;AACf;AACA;;AAEA,qBAAqB;AACrB;AACA;;AAEA;AACA;AACA,WAAW,GAAG;AACd,WAAW,GAAG;AACd;AACA,aAAa;AACb;AACA,iCAAiC;AACjC,6BAA6B;AAC7B,oBAAoB,SAAS;AAC7B;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;;AAEF,gBAAgB;AAChB;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA,iCAAiC;AACjC;;AAEA,cAAc;AACd,qBAAqB;AACrB,kBAAkB;;;;;;;;;;;;ACvEL;;AAEb,aAAa,mBAAO,CAAC,0DAAQ;;AAE7B;AACA;AACA;AACA;;AAEA;AACA,gBAAgB;AAChB,4BAA4B;;AAE5B,mDAAmD;AACnD,wDAAwD;AACxD,+EAA+E;AAC/E;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,kBAAkB,oBAAoB;;AAEtC;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,YAAY;AACZ;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY;AACZ;AACA,YAAY;AACZ,uBAAuB,qBAAqB;AAC5C;AACA;AACA;;AAEA;AACA;AACA,kBAAkB,oBAAoB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA,cAAc;AACd;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA,uBAAuB,gBAAgB;AACvC;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,GAAG;AACd,WAAW,GAAG;AACd;AACA;AACA;AACA,SAAS,oBAAoB;AAC7B;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,oBAAoB;AACrC;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,oBAAoB;AACrC;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,oBAAoB;AACrC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB;AACA;AACA;AACA;AACA;AACA,SAAS,oBAAoB;AAC7B;AACA;AACA;AACA,QAAQ;AACR;AACA,QAAQ;AACR;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA,iDAAiD;;AAEjD;AACA;;AAEA,kBAAkB,oBAAoB;AACtC;AACA;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA;AACA;AACA,4CAA4C;AAC5C,6BAA6B,OAAO;AACpC,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,oBAAoB;AAC7B,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,oBAAoB;AAC7B;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;;;;;;;;;ACtaa;AACb;AACA,2BAA2B,mBAAO,CAAC,uFAAiB;;AAEpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,MAAM,wCAAwC,GAAG;AACjD,MAAM,uCAAuC,GAAG;AAChD,MAAM,uCAAuC,GAAG;AAChD,MAAM,0CAA0C,GAAG;AACnD,MAAM,0CAA0C;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA,QAAQ;AACR;AACA,QAAQ;AACR;AACA;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA,sBAAsB,YAAY;AAClC;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,WAAW;AACX;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA,wBAAwB,OAAO;AAC/B;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;;AAEA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN,4CAA4C,IAAI;AAChD,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,qDAAqD;AACrD;AACA,GAAG,yCAAyC;AAC5C;AACA,GAAG;AACH,qBAAqB,IAAI;AACzB;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,+CAA+C,IAAI;AACnD,GAAG;AACH,0CAA0C,IAAI;AAC9C,GAAG,yBAAyB;AAC5B;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,kBAAkB,gCAAgC;AAClD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;;;;;;;;;;;AC7QA;;AAEA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,KAAK;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,oBAAoB,gBAAgB;AACpC;AACA;AACA;;AAEA;AACA;AACA,2BAA2B,MAAM,GAAG,QAAQ;;AAE5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,kCAAkC,yCAAyC;AAC3E;AACA;AACA,UAAU;AACV,2CAA2C,yCAAyC;AACpF;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,sFAAsF;AACtF,oCAAoC,QAAQ,EAAE,eAAe,EAAE,OAAO;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,QAAQ,EAAE,OAAO;AAC5D;AACA;AACA;AACA;AACA,UAAU;AACV;AACA,UAAU;AACV,qCAAqC,SAAS,EAAE,YAAY,IAAI,QAAQ;AACxE,UAAU;AACV;AACA;AACA;AACA,cAAc;AACd;AACA;AACA,2BAA2B,QAAQ;AACnC;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,oBAAoB,iBAAiB;AACrC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,gDAAgD;AAC/E,cAAc;AACd,+BAA+B,gDAAgD,IAAI,QAAQ;AAC3F;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,wBAAwB,6BAA6B;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACtIA,aAAa,mBAAO,CAAC,2DAAS;;AAE9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,iBAAiB;AAC9B,kDAAkD;AAClD;AACA;AACA;AACA;AACA;AACA,+CAA+C,YAAY;AAC3D;AACA;AACA;AACA,mEAAmE;AACnE,mEAAmE;AACnE,mEAAmE;AACnE;AACA;;AAEA;AACA;AACA,cAAc,+BAA+B;AAC7C;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,YAAY;AACZ;;AAEA;AACA;AACA;;AAEA;AACA,+CAA+C;;AAE/C;AACA;AACA;AACA;AACA;AACA,WAAW,mEAAmE;AAC9E;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,iDAAiD;AAC5D;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,+CAA+C,KAAK;AACpD;;AAEA;;;;;;;;;;;;ACtJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;;AAEA,oBAAoB;AACpB,sBAAsB;;;;;;;;;;;AC/CT;AACb;;AAEA,aAAa,mBAAO,CAAC,2DAAS;AAC9B,gBAAgB,mBAAO,CAAC,0EAAW;AACnC,oBAAoB,mBAAO,CAAC,sFAAiB;AAC7C,iBAAiB,mBAAO,CAAC,+CAAQ;;AAEjC;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,yBAAyB,cAAc;AACxD,eAAe,uBAAuB,cAAc;AACpD,eAAe,uBAAuB,cAAc;AACpD,iBAAiB,yBAAyB,eAAe;AACzD;AACA,uBAAuB,wBAAwB;AAC/C;AACA,iBAAiB,qBAAqB,cAAc;AACpD,kBAAkB,kBAAkB,cAAc;AAClD,kBAAkB,kBAAkB,cAAc;AAClD,mBAAmB,mBAAmB,cAAc;AACpD,oBAAoB,oBAAoB,eAAe;AACvD,oBAAoB,oBAAoB,cAAc;AACtD,iBAAiB,qBAAqB,cAAc;AACpD,kBAAkB,sBAAsB,cAAc;AACtD,gBAAgB,oBAAoB,cAAc;AAClD,iBAAiB,sBAAsB,cAAc;AACrD,sBAAsB,qBAAqB,cAAc;AACzD,gBAAgB,oBAAoB,cAAc;AAClD,gBAAgB,qBAAqB,cAAc;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,kBAAkB,oBAAoB;AACtC;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA;;AAEA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,SAAS;AACpB,WAAW,SAAS;AACpB,WAAW,SAAS;AACpB,WAAW,SAAS;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,gCAAgC;AAChC;AACA,oBAAoB,SAAS;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA,eAAe,mBAAmB,KAAK;AACvC;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,4EAA4E,QAAQ;AACpF;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA,+CAA+C;AAC/C;AACA;AACA,QAAQ;;AAER;AACA;;AAEA;AACA;;AAEA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA;AACA,QAAQ;AACR;AACA;AACA;;AAEA;;AAEA,4DAA4D,wCAAwC;AACpG;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,0DAA0D,uCAAuC;AACjG,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAM;AACb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D,WAAW;AACxE;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,qDAAqD;AACrD;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,UAAU;AACrB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB;AACA;AACA;AACA;AACA;AACA,sBAAsB,wBAAwB;AAC9C;AACA;AACA,mDAAmD;AACnD,MAAM;AACN;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB;AACA;AACA;AACA;AACA;;AAEA,SAAS,oBAAoB;AAC7B;AACA,iCAAiC;AACjC,kEAAkE,SAAS;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,UAAU;AACV;AACA;AACA,UAAU;AACV;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;;;AAGA;;;;;;;;;;;AC/kBA,QAAQ,cAAc,EAAE,mBAAO,CAAC,wFAAkB;AAClD,yBAAyB,mBAAO,CAAC,4FAAoB;AACrD,QAAQ,UAAU,EAAE,mBAAO,CAAC,8EAAa;AACzC,kBAAkB,mBAAO,CAAC,qEAAc;;AAExC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,eAAe;AAC9B,eAAe,gBAAgB;AAC/B;AACA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA;AACA,iEAAiE;AACjE;AACA;AACA;AACA,8BAA8B,eAAe,GAAG,gBAAgB,GAAG,eAAe;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA,SAAS,iDAAiD;AAC1D,qEAAqE,2BAA2B;AAChG,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;;;;;;;;;;;ACzDa;;AAEb;AACA;AACA,WAAW,OAAO;AAClB,WAAW,KAAK;AAChB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB;AACA;AACA;AACA;AACA;AACA,kBAAkB,gBAAgB;AAClC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA,kBAAkB,iBAAiB;AACnC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,6BAA6B;AAC7B,oBAAoB,SAAS;AAC7B;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;;AAEA;AACA,UAAU,eAAe;AACzB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,gBAAgB;;;;;;;;;;;;AChHH;;AAEb;AACA;AACA;AACA,qBAAqB;AACrB,qBAAqB;AACrB;AACA;AACA,yBAAyB,wCAAwC;AACjE;AACA,sBAAsB,YAAY;AAClC;AACA;AACA;AACA;AACA,yBAAyB,gDAAgD;AACzE,KAAK;AACL,yBAAyB,4BAA4B;AACrD;AACA;AACA;;;AAGA;;;;;;;;;;ACxBA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,SAAS,WAAW;;AAEpB;AACA;AACA;AACA,SAAS,WAAW;;AAEpB;AACA;AACA,IAAI;AACJ;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;;AAEA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;;AAEA,SAAS,WAAW;;AAEpB;AACA;AACA,SAAS,UAAU;;AAEnB;AACA;;;;;;;;;;;;ACpFa;AACb,OAAO,yBAAyB,EAAE,mBAAO,CAAC,kEAAiB;;AAE3D;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,yBAAsB;;;;;;;;;;;;;ACzCtB;;;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,mCAAmC;AACnC,uCAAuC;AACvC;AACA;AACA,QAAQ;AACR;AACA;;AAEA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA,QAAQ;AACR;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,yDAAyD;AACzD;AACA;AACA;AACA,8GAA8G;AAC9G,oHAAoH;AACpH,iBAAiB;AACjB;AACA;AACA,kDAAkD;AAClD;AACA;AACA,iBAAiB,oBAAoB;AACrC;AACA;AACA,iBAAiB,yCAAyC;AAC1D;AACA;;AAEA;AACA;AACA;AACA;AACA,kFAAkF;AAClF,sEAAsE;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS,MAAM;AACf;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,QAAQ;AACnB;AACA;AACA;AACA,6CAA6C;AAC7C,4CAA4C;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AC3HA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;UAEA;UACA;;;;;WCzBA;WACA;WACA;WACA;WACA,+BAA+B,wCAAwC;WACvE;WACA;WACA;WACA;WACA,iBAAiB,qBAAqB;WACtC;WACA;WACA,kBAAkB,qBAAqB;WACvC;WACA;WACA,KAAK;WACL;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;;;;;WC3BA;WACA;WACA;WACA;WACA;WACA,iCAAiC,WAAW;WAC5C;WACA;;;;;WCPA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;WCNA;;WAEA;WACA;WACA;WACA;WACA;WACA;WACA;;WAEA;;WAEA;;WAEA;;WAEA;;WAEA;;WAEA;;WAEA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA,MAAM,qBAAqB;WAC3B;WACA;WACA;WACA;WACA;WACA;WACA;WACA;;WAEA;WACA;WACA;;;;;UEjDA;UACA;UACA;UACA;UACA","sources":["webpack://ieeesbtkmce/./node_modules/@skjnldsv/sanitize-svg/dist/index.esm.js","webpack://ieeesbtkmce/./src/blocks/services-item/data.js","webpack://ieeesbtkmce/./src/blocks/services-item/edit.js","webpack://ieeesbtkmce/./src/blocks/services-item/index.js","webpack://ieeesbtkmce/./src/blocks/services-item/save.js","webpack://ieeesbtkmce/./node_modules/base64-js/index.js","webpack://ieeesbtkmce/./node_modules/buffer/index.js","webpack://ieeesbtkmce/./node_modules/fast-xml-parser/src/fxp.js","webpack://ieeesbtkmce/./node_modules/fast-xml-parser/src/util.js","webpack://ieeesbtkmce/./node_modules/fast-xml-parser/src/validator.js","webpack://ieeesbtkmce/./node_modules/fast-xml-parser/src/xmlbuilder/json2xml.js","webpack://ieeesbtkmce/./node_modules/fast-xml-parser/src/xmlbuilder/orderedJs2Xml.js","webpack://ieeesbtkmce/./node_modules/fast-xml-parser/src/xmlparser/DocTypeReader.js","webpack://ieeesbtkmce/./node_modules/fast-xml-parser/src/xmlparser/OptionsBuilder.js","webpack://ieeesbtkmce/./node_modules/fast-xml-parser/src/xmlparser/OrderedObjParser.js","webpack://ieeesbtkmce/./node_modules/fast-xml-parser/src/xmlparser/XMLParser.js","webpack://ieeesbtkmce/./node_modules/fast-xml-parser/src/xmlparser/node2json.js","webpack://ieeesbtkmce/./node_modules/fast-xml-parser/src/xmlparser/xmlNode.js","webpack://ieeesbtkmce/./node_modules/ieee754/index.js","webpack://ieeesbtkmce/./node_modules/is-svg/index.js","webpack://ieeesbtkmce/./src/blocks/services-item/editor.scss?0e5d","webpack://ieeesbtkmce/./src/blocks/services-item/style.scss","webpack://ieeesbtkmce/./node_modules/strnum/strnum.js","webpack://ieeesbtkmce/external window \"React\"","webpack://ieeesbtkmce/external window [\"wp\",\"blockEditor\"]","webpack://ieeesbtkmce/external window [\"wp\",\"blocks\"]","webpack://ieeesbtkmce/external window [\"wp\",\"components\"]","webpack://ieeesbtkmce/external window [\"wp\",\"element\"]","webpack://ieeesbtkmce/external window [\"wp\",\"i18n\"]","webpack://ieeesbtkmce/webpack/bootstrap","webpack://ieeesbtkmce/webpack/runtime/chunk loaded","webpack://ieeesbtkmce/webpack/runtime/compat get default export","webpack://ieeesbtkmce/webpack/runtime/define property getters","webpack://ieeesbtkmce/webpack/runtime/hasOwnProperty shorthand","webpack://ieeesbtkmce/webpack/runtime/make namespace object","webpack://ieeesbtkmce/webpack/runtime/jsonp chunk loading","webpack://ieeesbtkmce/webpack/before-startup","webpack://ieeesbtkmce/webpack/startup","webpack://ieeesbtkmce/webpack/after-startup"],"sourcesContent":["import { Buffer } from 'buffer';\nimport isSvg from 'is-svg';\n\nconst readAsText = (svg) => new Promise((resolve) => {\n    if (!isFile(svg)) {\n        resolve(svg.toString('utf-8'));\n    }\n    else {\n        const fileReader = new FileReader();\n        fileReader.onload = () => {\n            resolve(fileReader.result);\n        };\n        fileReader.readAsText(svg);\n    }\n});\nconst isFile = (obj) => {\n    return obj.size !== undefined;\n};\nconst sanitizeSVG = async (svg) => {\n    if (!svg) {\n        throw new Error('Not an svg');\n    }\n    let svgText = '';\n    if (Buffer.isBuffer(svg) || svg instanceof File) {\n        svgText = await readAsText(svg);\n    }\n    else {\n        svgText = svg;\n    }\n    if (!isSvg(svgText)) {\n        throw new Error('Not an svg');\n    }\n    const div = document.createElement('div');\n    div.innerHTML = svgText;\n    const svgEl = div.firstElementChild;\n    const attributes = Array.from(svgEl.attributes).map(({ name }) => name);\n    const hasScriptAttr = !!attributes.find((attr) => attr.startsWith('on'));\n    const scripts = svgEl.getElementsByTagName('script');\n    return scripts.length === 0 && !hasScriptAttr ? svg : null;\n};\n\nexport { sanitizeSVG };\n//# sourceMappingURL=index.esm.js.map\n","// data.js\nexport const icons = [\n  `<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"41\" height=\"43\" viewBox=\"0 0 41 43\" fill=\"none\"> <g clip-path=\"url(#clip0_35_52)\"> <path d=\"M38.998 34.7649H38.6253C37.9613 34.1272 37.5839 33.2411 37.5839 32.3014C37.5839 31.3617 37.9613 30.4756 38.6252 29.838H38.998C39.5323 29.838 40.035 29.6245 40.4133 29.237C40.7917 28.8494 41 28.3346 41 27.7873C41 26.6565 40.1019 25.7365 38.998 25.7365H37.1578C37.3674 25.5726 37.5683 25.3945 37.758 25.2003C38.8747 24.0562 39.487 22.535 39.4817 20.9168C39.4717 17.7982 37.1008 15.2275 34.0889 14.9351C34.1777 14.7094 34.2247 14.4661 34.2247 14.2151C34.2247 13.1554 33.3833 12.2932 32.3492 12.2932H32.0312C31.4475 11.7244 31.1159 10.9392 31.1159 10.1068C31.1159 9.27416 31.4476 8.48879 32.0316 7.92007H32.3492C32.8491 7.92007 33.3199 7.72057 33.6763 7.35684C34.0299 6.99336 34.2247 6.51077 34.2247 5.99808C34.2247 4.93872 33.3833 4.0769 32.3492 4.0769H10.0338C6.75443 4.0769 4.07854 6.77311 4.06885 10.0869C4.06364 11.7052 4.67584 13.2263 5.79261 14.3703C5.98223 14.5646 6.18315 14.7427 6.39271 14.9066H3.93432C2.89971 14.9066 2.05801 15.7684 2.05801 16.8278C2.05801 17.3412 2.25308 17.8238 2.6071 18.1865C2.96177 18.5498 3.43303 18.7497 3.93424 18.7497H4.25143C4.83535 19.3186 5.1672 20.1039 5.1672 20.9365C5.1672 21.7694 4.83528 22.5549 4.2511 23.1237H3.93432C2.89971 23.1237 2.05801 23.9855 2.05801 25.0448C2.05801 25.5575 2.25276 26.0401 2.60782 26.4052C2.74059 26.5407 2.88962 26.6534 3.05041 26.7414C1.22655 27.9009 0.0073651 29.9494 -2.08602e-06 32.28C-0.00504701 34.042 0.661443 35.6981 1.87679 36.9431C3.08757 38.1834 4.69706 38.8664 6.40873 38.8664H38.998C39.5323 38.8664 40.0349 38.653 40.4133 38.2654C40.7917 37.8778 41 37.363 41 36.8157C41 35.6849 40.1019 34.7649 38.998 34.7649ZM39.7988 27.7873C39.7988 28.006 39.7154 28.2118 39.5639 28.367C39.4124 28.5221 39.2115 28.6076 38.998 28.6076H34.1954V26.967H38.998C39.4396 26.967 39.7988 27.335 39.7988 27.7873ZM6.64208 13.5004C5.75313 12.5899 5.26585 11.3791 5.27002 10.0909C5.27779 7.45331 7.41475 5.30745 10.0338 5.30745H32.3492C32.721 5.30745 33.0235 5.61729 33.0235 5.99816C33.0235 6.18306 32.9532 6.35713 32.827 6.48682C32.6988 6.61766 32.5291 6.68968 32.3492 6.68968H13.152C12.8203 6.68968 12.5514 6.96514 12.5514 7.30492C12.5514 7.64469 12.8203 7.92015 13.152 7.92015H30.5054C30.1229 8.57238 29.9146 9.32477 29.9146 10.1069C29.9146 10.8889 30.1228 11.6412 30.5051 12.2932H9.95539C9.3765 12.2932 8.83422 12.0588 8.42846 11.633C8.02294 11.2076 7.80721 10.6465 7.82115 10.053C7.84877 8.87696 8.82917 7.92015 10.0066 7.92015H10.7497C11.0814 7.92015 11.3503 7.64469 11.3503 7.30492C11.3503 6.96514 11.0814 6.68968 10.7497 6.68968H10.0066C8.1827 6.68968 6.66354 8.18511 6.62022 10.0234C6.59852 10.951 6.93548 11.828 7.5689 12.4926C8.20264 13.1575 9.05019 13.5237 9.95539 13.5237H32.3492C32.721 13.5237 33.0235 13.8339 33.0235 14.2152C33.0235 14.4 32.9534 14.5735 32.8263 14.7038C32.6985 14.8346 32.529 14.9068 32.3492 14.9068H9.95539C8.70393 14.9068 7.52718 14.4073 6.64208 13.5004ZM3.45649 17.3165C3.32925 17.1862 3.25918 17.0127 3.25918 16.8278C3.25918 16.447 3.56203 16.1371 3.93432 16.1371H9.95531H32.3492H33.5159C36.1347 16.1371 38.2721 18.2831 38.2805 20.9208C38.2847 22.2088 37.7974 23.4195 36.9085 24.3301C36.1665 25.0903 35.2194 25.5628 34.1954 25.6962V24.2982C34.8701 24.1731 35.4894 23.8383 35.9803 23.3232C36.614 22.6583 36.9511 21.781 36.9295 20.8533C36.8872 19.0149 35.3684 17.5193 33.544 17.5193H3.93432C3.7539 17.5194 3.58421 17.4473 3.45649 17.3165ZM5.77771 18.7499H33.544C34.7215 18.7499 35.7015 19.7066 35.7286 20.8826C35.7425 21.4765 35.5267 22.038 35.1208 22.4638C34.8599 22.7375 34.5425 22.9317 34.1954 23.0357V21.749C34.1954 21.4092 33.9266 21.1337 33.5949 21.1337H21.7157C21.3839 21.1337 21.1151 21.4092 21.1151 21.749C21.1151 22.0888 21.3839 22.3642 21.7157 22.3642H25.7694V23.1238H5.77747C6.16001 22.4715 6.36845 21.719 6.36845 20.9367C6.36845 20.1545 6.16009 19.4021 5.77771 18.7499ZM26.9706 22.3642H32.9943V31.0867L30.2586 29.635C30.1721 29.589 30.0772 29.5661 29.9824 29.5661C29.8877 29.5661 29.7928 29.589 29.7062 29.6351L26.9706 31.0867L26.9706 22.3642ZM3.93432 24.3542H25.7694V25.7364H3.93432C3.75382 25.7364 3.58389 25.6644 3.45721 25.5351C3.32949 25.4039 3.25918 25.2298 3.25918 25.0449C3.25926 24.6641 3.56211 24.3542 3.93432 24.3542ZM39.5639 37.3954C39.4124 37.5506 39.2114 37.636 38.998 37.636H6.40873C5.01793 37.636 3.7101 37.0809 2.72626 36.073C1.73865 35.0614 1.19709 33.7156 1.20117 32.2838C1.21038 29.3521 3.58526 26.967 6.49513 26.967H25.7693V28.6076H6.46479C4.49246 28.6076 2.85014 30.2242 2.80369 32.2114C2.78055 33.2145 3.14499 34.1626 3.82997 34.8811C4.51496 35.5996 5.43074 35.9953 6.40865 35.9953H28.3004C28.6322 35.9953 28.901 35.7199 28.901 35.3801C28.901 35.0403 28.6322 34.7649 28.3004 34.7649H6.40873C5.75705 34.7649 5.14638 34.5008 4.68937 34.0214C4.23229 33.542 3.98909 32.9095 4.00454 32.2407C4.03553 30.9159 5.13917 29.8381 6.46479 29.8381H25.7694V32.0982C25.7694 32.313 25.8787 32.5122 26.0579 32.6239C26.2371 32.7355 26.4601 32.7433 26.6463 32.6444L29.9824 30.874L33.3187 32.6444C33.4055 32.6905 33.5004 32.7134 33.5949 32.7134C33.7033 32.7134 33.8114 32.6834 33.907 32.6239C34.0861 32.5122 34.1955 32.313 34.1955 32.0982V29.838H37.0793C36.6292 30.5661 36.3827 31.4161 36.3827 32.3014C36.3827 33.1868 36.6292 34.0367 37.0794 34.7649H30.7027C30.371 34.7649 30.1022 35.0403 30.1022 35.3801C30.1022 35.7199 30.371 35.9953 30.7027 35.9953H38.998C39.4396 35.9953 39.7988 36.3633 39.7988 36.8157C39.7988 37.0343 39.7154 37.2402 39.5639 37.3954Z\" fill=\"#1ABC9C\"/> </g> <defs> <clipPath id=\"clip0_35_52\"> <rect width=\"41\" height=\"42\" fill=\"white\" transform=\"translate(0 0.47168)\"/> </clipPath> </defs> </svg>`,\n  `<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"42\" height=\"42\" viewBox=\"0 0 42 42\" fill=\"none\"> <path d=\"M39.9281 25.9151C39.7957 25.7908 39.6771 25.6808 39.5706 25.582C39.153 25.1947 38.9434 25.0002 38.8401 24.8212C38.7367 24.6422 38.6732 24.3635 38.5464 23.8082C38.5141 23.6665 38.4781 23.5089 38.4367 23.332C38.2016 22.3288 37.3526 21.6164 36.3239 21.5591C36.1425 21.549 35.9809 21.541 35.8358 21.5338C35.2669 21.5055 34.9814 21.4912 34.7872 21.4205C34.593 21.3499 34.3651 21.1772 33.9111 20.8332C33.7953 20.7455 33.6664 20.6478 33.521 20.539C32.6963 19.9216 31.5878 19.9216 30.763 20.539C30.6177 20.6478 30.4887 20.7455 30.3729 20.8331C29.9189 21.1772 29.691 21.3498 29.4967 21.4205C29.4155 21.4501 29.3178 21.4698 29.1904 21.4847C27.0893 19.5986 24.5738 18.2981 21.8688 17.6718C24.7945 16.2671 26.8194 13.2748 26.8194 9.81832C26.8195 5.01779 22.914 1.1123 18.1135 1.1123C13.3129 1.1123 9.40745 5.01779 9.40745 9.81832C9.40745 13.275 11.4325 16.2674 14.3584 17.6721C11.6337 18.3035 9.09715 19.6184 6.98862 21.5253C3.95734 24.2666 2.0494 28.0047 1.61641 32.051C1.59703 32.2318 1.65541 32.4122 1.77689 32.5474C1.89837 32.6825 2.07158 32.7598 2.25335 32.7598L18.1123 32.7597C18.1127 32.7597 18.1131 32.7598 18.1134 32.7598C18.1137 32.7598 18.1141 32.7597 18.1144 32.7597H24.5674C24.7943 33.2845 25.2149 33.7178 25.774 33.9573C25.9409 34.0288 26.09 34.0917 26.2239 34.1481C26.292 34.1767 26.3555 34.2035 26.4152 34.2289L24.6301 38.063C24.5056 38.3304 24.5398 38.6418 24.7192 38.8756C24.8985 39.1095 25.1901 39.2231 25.4807 39.1723L27.2822 38.8576L28.201 40.4388C28.343 40.6832 28.6016 40.8311 28.8822 40.8311C28.8942 40.8311 28.9063 40.8309 28.9184 40.8303C29.2128 40.817 29.473 40.6427 29.5976 40.3753L31.3543 36.6021C31.7456 36.4827 31.9678 36.4226 32.142 36.4226C32.3163 36.4226 32.5385 36.4827 32.9298 36.6021L34.6864 40.3753C34.8108 40.6426 35.071 40.8169 35.3654 40.8303C35.3776 40.8309 35.3898 40.8311 35.4019 40.8311C35.6824 40.8311 35.941 40.6832 36.0831 40.4388L37.0019 38.8576L38.8034 39.1724C39.0942 39.2231 39.3859 39.1093 39.5652 38.8752C39.7444 38.6412 39.7784 38.3298 39.6538 38.0628L37.8688 34.2289C37.9285 34.2035 37.992 34.1768 38.0601 34.1481C38.1939 34.0917 38.343 34.0288 38.51 33.9573C39.4571 33.5517 40.0113 32.5918 39.889 31.5687C39.8675 31.3883 39.8473 31.2278 39.8293 31.0837C39.7584 30.5185 39.7228 30.2349 39.7587 30.0313C39.7947 29.8278 39.9251 29.5734 40.185 29.0665C40.2512 28.9373 40.3251 28.7934 40.407 28.6313C40.8718 27.7118 40.6794 26.6203 39.9281 25.9151ZM23.8771 28.6313C23.959 28.7934 24.0328 28.9373 24.0991 29.0666C24.359 29.5735 24.4894 29.8278 24.5253 30.0314C24.5612 30.235 24.5256 30.5186 24.4548 31.0838C24.4398 31.2033 24.4234 31.3347 24.4059 31.4786H19.5567L21.1727 29.692C21.3096 29.5406 21.3662 29.3329 21.325 29.1329L20.5016 25.1412L20.6618 25.3311C20.7842 25.4762 20.9637 25.5586 21.1514 25.5586C21.1715 25.5586 21.1918 25.5577 21.212 25.5558C21.4212 25.5359 21.6074 25.4147 21.7102 25.2315L24.6524 19.9882C25.6183 20.4449 26.5382 21.0043 27.3969 21.6605C26.6314 21.8978 26.0378 22.5194 25.8474 23.3322C25.8059 23.509 25.77 23.6668 25.7377 23.8084C25.611 24.3637 25.5474 24.6425 25.4441 24.8214C25.3407 25.0004 25.1311 25.1949 24.7135 25.5823C24.607 25.681 24.4884 25.791 24.356 25.9154C23.6047 26.6202 23.4123 27.7118 23.8771 28.6313ZM15.1817 23.7982L12.7596 19.4818C13.2086 19.3151 13.6675 19.1692 14.1349 19.0444L17.1932 21.4132L15.1817 23.7982ZM17.4569 23.0877L18.1134 22.3093L18.7698 23.0877L20.0044 29.0735L18.1133 31.1643L16.2222 29.0735L17.4569 23.0877ZM19.0337 21.4132L22.0886 19.0471C22.5544 19.172 23.0134 19.3189 23.4643 19.487L21.0451 23.7982L19.0337 21.4132ZM10.6887 9.81832C10.6887 5.72432 14.0195 2.39355 18.1135 2.39355C22.2075 2.39355 25.5382 5.72432 25.5382 9.81832C25.5382 13.9113 22.2092 17.2413 18.1167 17.2431C18.1156 17.2431 18.1145 17.2431 18.1134 17.2431C18.1123 17.2431 18.1113 17.2431 18.1102 17.2431C14.0177 17.2412 10.6887 13.9113 10.6887 9.81832ZM18.1135 18.5243H18.1167C18.901 18.5245 19.6777 18.5851 20.4418 18.7019L18.1134 20.5054L15.7831 18.7005C16.5427 18.5851 17.3197 18.5245 18.1102 18.5243C18.1113 18.5243 18.1124 18.5243 18.1135 18.5243ZM11.5709 19.9817L14.5168 25.2314C14.6196 25.4146 14.8057 25.5357 15.0149 25.5556C15.0352 25.5575 15.0554 25.5585 15.0755 25.5585C15.2632 25.5585 15.4429 25.4759 15.5651 25.3309L15.7252 25.1411L14.9019 29.1328C14.8606 29.3329 14.9171 29.5405 15.0542 29.692L16.6701 31.4786L2.98271 31.4787C3.77452 26.327 7.08327 22.0951 11.5709 19.9817ZM28.8346 38.9788L28.1658 37.8277C28.031 37.5958 27.7662 37.4726 27.5016 37.5185L26.1903 37.7476L27.4772 34.9836C27.5636 35.1094 27.6649 35.2663 27.7931 35.4647C27.8719 35.5867 27.9596 35.7226 28.059 35.8746C28.4605 36.4885 29.1044 36.8558 29.7978 36.9098L28.8346 38.9788ZM36.7826 37.5185C36.5183 37.4723 36.2532 37.5957 36.1184 37.8277L35.4496 38.9787L34.4868 36.9107C35.18 36.8565 35.8238 36.4884 36.2251 35.8745C36.3245 35.7225 36.4123 35.5867 36.4911 35.4647C36.6192 35.2663 36.7206 35.1094 36.807 34.9836L38.0938 37.7476L36.7826 37.5185ZM39.2635 28.0533C39.1828 28.2129 39.1102 28.3546 39.0449 28.4819C38.4067 29.7265 38.384 29.8555 38.5581 31.2431C38.5758 31.385 38.5957 31.5431 38.6169 31.7207C38.672 32.1813 38.432 32.5969 38.0057 32.7794C37.8412 32.8498 37.6944 32.9117 37.5626 32.9673C36.2738 33.5105 36.1734 33.5946 35.4147 34.7696C35.3372 34.8897 35.2508 35.0235 35.1529 35.1733C34.899 35.5614 34.448 35.7256 34.0042 35.5914C33.833 35.5396 33.6807 35.4926 33.544 35.4504C32.8758 35.2442 32.509 35.1412 32.1421 35.1412C31.7753 35.1412 31.4084 35.2443 30.7402 35.4504C30.6035 35.4926 30.4513 35.5396 30.2801 35.5914C29.8362 35.7253 29.3852 35.5614 29.1313 35.1733C29.0334 35.0235 28.9471 34.8897 28.8695 34.7696C28.1107 33.5947 28.0104 33.5105 26.7216 32.9673C26.5898 32.9118 26.443 32.8499 26.2786 32.7794C25.8522 32.5969 25.6123 32.1813 25.6673 31.7207C25.6885 31.5431 25.7084 31.385 25.7262 31.2431C25.9002 29.8555 25.8775 29.7265 25.2392 28.4819C25.174 28.3546 25.1013 28.2129 25.0206 28.0533C24.8114 27.6394 24.8947 27.1668 25.2328 26.8494C25.3633 26.727 25.48 26.6186 25.5849 26.5213C26.6102 25.5702 26.6757 25.4568 26.9868 24.0931C27.0186 23.9537 27.0541 23.7984 27.0949 23.6243C27.2007 23.1726 27.5683 22.8642 28.0314 22.8385C28.21 22.8285 28.3692 22.8206 28.512 22.8135C29.9088 22.7439 30.0319 22.699 31.1468 21.8544C31.2608 21.7681 31.3877 21.6719 31.5309 21.5647C31.9023 21.2867 32.382 21.2868 32.7534 21.5647C32.8966 21.6718 33.0235 21.7681 33.1376 21.8545C34.2523 22.699 34.3754 22.7438 35.7722 22.8134C35.9151 22.8205 36.0742 22.8285 36.2528 22.8384C36.7159 22.8641 37.0836 23.1725 37.1894 23.6242C37.2302 23.7984 37.2656 23.9537 37.2975 24.0931C37.6086 25.4566 37.6741 25.5701 38.6994 26.5213C38.8043 26.6185 38.9211 26.7268 39.0514 26.8493C39.3895 27.1668 39.4729 27.6394 39.2635 28.0533ZM32.142 23.7005C29.4973 23.7005 27.3456 25.8522 27.3456 28.4969C27.3456 31.1415 29.4973 33.2932 32.142 33.2932C34.7868 33.2932 36.9385 31.1416 36.9385 28.4969C36.9385 25.8523 34.7869 23.7005 32.142 23.7005ZM32.142 32.0121C30.2037 32.0121 28.6268 30.4352 28.6268 28.4969C28.6268 26.5587 30.2037 24.9818 32.142 24.9818C34.0803 24.9818 35.6572 26.5587 35.6572 28.4969C35.6572 30.4352 34.0803 32.0121 32.142 32.0121Z\" fill=\"#3498DB\"/> </svg>`,\n  `<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"39\" height=\"39\" viewBox=\"0 0 39 39\" fill=\"none\"> <path d=\"M30.4818 15.6717C34.6727 15.6717 38.0818 12.2626 38.0818 8.07168C38.0818 3.88079 34.6727 0.47168 30.4818 0.47168C27.4386 0.47168 24.8146 2.27365 23.6021 4.86327L21.5669 4.11211C21.5911 3.95625 21.6152 3.80039 21.6152 3.63835C21.6152 1.89235 20.1945 0.47168 18.4485 0.47168C16.7025 0.47168 15.2818 1.89235 15.2818 3.63835C15.2818 5.38434 16.7025 6.80501 18.4485 6.80501C19.5828 6.80501 20.5721 6.20013 21.1312 5.30146L23.163 6.05138C22.9845 6.69616 22.8818 7.37124 22.8818 8.07168C22.8818 8.90138 23.0198 9.698 23.2669 10.4461L16.3014 13.3981C15.0261 10.9869 12.4946 9.33835 9.58185 9.33835C8.63803 9.33835 7.73751 9.51956 6.90286 9.83499L5.15099 6.15343C5.91421 5.57453 6.41518 4.66751 6.41518 3.63835C6.41518 1.89235 4.99451 0.47168 3.24851 0.47168C1.50252 0.47168 0.0818481 1.89235 0.0818481 3.63835C0.0818481 5.38434 1.50252 6.80501 3.24851 6.80501C3.51199 6.80501 3.76464 6.76327 4.00988 6.70173L5.75958 10.3796C3.50426 11.6994 1.98185 14.1415 1.98185 16.9383C1.98185 19.5654 3.32211 21.8841 5.35385 23.2494L4.19542 25.3319C3.89391 25.2369 3.58033 25.1717 3.24851 25.1717C1.50252 25.1717 0.0818481 26.5924 0.0818481 28.3383C0.0818481 30.0843 1.50252 31.505 3.24851 31.505C4.99451 31.505 6.41518 30.0843 6.41518 28.3383C6.41518 27.3794 5.9776 26.529 5.30252 25.9482L6.46342 23.8614C7.4159 24.2925 8.4698 24.5383 9.58185 24.5383C11.3198 24.5383 12.9183 23.9455 14.2001 22.96L16.6929 25.7023C15.4287 27.0602 14.6485 28.8743 14.6485 30.8717C14.6485 31.2592 14.6872 31.6368 14.7428 32.0085L11.81 32.7046C11.3053 31.6253 10.2164 30.8717 8.94851 30.8717C7.20252 30.8717 5.78185 32.2924 5.78185 34.0383C5.78185 35.7843 7.20252 37.205 8.94851 37.205C10.6945 37.205 12.1152 35.7843 12.1152 34.0383C12.1152 34.0034 12.1056 33.9706 12.105 33.9357L15.0323 33.2417C16.0305 36.2745 18.8855 38.4717 22.2485 38.4717C26.4394 38.4717 29.8485 35.0626 29.8485 30.8717C29.8485 29.5722 29.5198 28.3486 28.9421 27.2783L32.6623 24.8593C33.2375 25.442 34.0341 25.805 34.9152 25.805C36.6612 25.805 38.0818 24.3843 38.0818 22.6383C38.0818 20.8923 36.6612 19.4717 34.9152 19.4717C33.1692 19.4717 31.7485 20.8923 31.7485 22.6383C31.7485 23.0475 31.8326 23.4362 31.9746 23.7955L28.2457 26.2197C27.4995 25.2604 26.5306 24.4858 25.4152 23.9715L28.5064 15.402C29.1373 15.5721 29.7978 15.6717 30.4818 15.6717ZM18.4485 5.53835C17.4011 5.53835 16.5485 4.68576 16.5485 3.63835C16.5485 2.59093 17.4011 1.73835 18.4485 1.73835C19.4959 1.73835 20.3485 2.59093 20.3485 3.63835C20.3485 4.68576 19.4959 5.53835 18.4485 5.53835ZM1.34851 3.63835C1.34851 2.59093 2.2011 1.73835 3.24851 1.73835C4.29593 1.73835 5.14851 2.59093 5.14851 3.63835C5.14851 4.68576 4.29593 5.53835 3.24851 5.53835C2.2011 5.53835 1.34851 4.68576 1.34851 3.63835ZM3.24851 30.2383C2.2011 30.2383 1.34851 29.3858 1.34851 28.3383C1.34851 27.2909 2.2011 26.4383 3.24851 26.4383C4.29593 26.4383 5.14851 27.2909 5.14851 28.3383C5.14851 29.3858 4.29593 30.2383 3.24851 30.2383ZM8.94851 35.9383C7.9011 35.9383 7.04851 35.0858 7.04851 34.0383C7.04851 32.9909 7.9011 32.1383 8.94851 32.1383C9.99593 32.1383 10.8485 32.9909 10.8485 34.0383C10.8485 35.0858 9.99593 35.9383 8.94851 35.9383ZM34.9152 20.7383C35.9626 20.7383 36.8152 21.5909 36.8152 22.6383C36.8152 23.6858 35.9626 24.5383 34.9152 24.5383C33.8678 24.5383 33.0152 23.6858 33.0152 22.6383C33.0152 21.5909 33.8678 20.7383 34.9152 20.7383ZM26.752 13.1789C27.0347 11.714 28.3261 10.605 29.8485 10.605H31.1152C32.6376 10.605 33.929 11.714 34.2117 13.1789C33.1639 13.9458 31.8772 14.405 30.4818 14.405C29.0865 14.405 27.7998 13.9458 26.752 13.1789ZM30.4818 9.33835C29.4344 9.33835 28.5818 8.48576 28.5818 7.43835C28.5818 6.39093 29.4344 5.53835 30.4818 5.53835C31.5293 5.53835 32.3818 6.39093 32.3818 7.43835C32.3818 8.48576 31.5293 9.33835 30.4818 9.33835ZM30.4818 1.73835C33.9741 1.73835 36.8152 4.57938 36.8152 8.07168C36.8152 9.65501 36.2267 11.1017 35.2622 12.2131C34.8184 11.0444 33.8931 10.1118 32.7403 9.6513C33.3009 9.07982 33.6485 8.29959 33.6485 7.43835C33.6485 5.69235 32.2278 4.27168 30.4818 4.27168C28.7359 4.27168 27.3152 5.69235 27.3152 7.43835C27.3152 8.29959 27.6628 9.07982 28.2234 9.6513C27.0706 10.1118 26.1453 11.0444 25.7015 12.2131C24.737 11.1017 24.1485 9.65501 24.1485 8.07168C24.1485 4.57938 26.9895 1.73835 30.4818 1.73835ZM3.24851 16.9383C3.24851 13.446 6.08955 10.605 9.58185 10.605C13.0741 10.605 15.9152 13.446 15.9152 16.9383C15.9152 18.5266 15.323 19.977 14.3535 21.09C13.9113 19.917 12.9842 18.9797 11.8282 18.518C12.3882 17.9465 12.7358 17.1663 12.7358 16.305C12.7358 14.559 11.3152 13.1383 9.56917 13.1383C7.82317 13.1383 6.4025 14.559 6.4025 16.305C6.4025 17.1663 6.75009 17.9465 7.31075 18.518C6.16129 18.9763 5.23727 19.9056 4.79196 21.0695C3.83299 19.9594 3.24851 18.5173 3.24851 16.9383ZM7.66917 16.305C7.66917 15.2576 8.52176 14.405 9.56917 14.405C10.6166 14.405 11.4692 15.2576 11.4692 16.305C11.4692 17.3524 10.6166 18.205 9.56917 18.205C8.52176 18.205 7.66917 17.3524 7.66917 16.305ZM5.84153 22.0372C6.12697 20.5763 7.41652 19.4717 8.93584 19.4717H10.2025C11.7277 19.4717 13.0216 20.5843 13.3002 22.0539C12.2547 22.8162 10.9719 23.2717 9.58185 23.2717C8.18159 23.2717 6.8908 22.8094 5.84153 22.0372ZM18.5082 35.9705C18.7936 34.5096 20.0832 33.405 21.6025 33.405H22.8692C24.3944 33.405 25.6882 34.5177 25.9669 35.9872C24.9213 36.7495 23.6386 37.205 22.2485 37.205C20.8483 37.205 19.5575 36.7427 18.5082 35.9705ZM22.2358 32.1383C21.1884 32.1383 20.3358 31.2858 20.3358 30.2383C20.3358 29.1909 21.1884 28.3383 22.2358 28.3383C23.2832 28.3383 24.1358 29.1909 24.1358 30.2383C24.1358 31.2858 23.2832 32.1383 22.2358 32.1383ZM28.5818 30.8717C28.5818 32.46 27.9896 33.9103 27.0202 35.0233C26.5779 33.8503 25.6508 32.913 24.4949 32.4513C25.0549 31.8798 25.4025 31.0996 25.4025 30.2383C25.4025 28.4923 23.9818 27.0717 22.2358 27.0717C20.4898 27.0717 19.0692 28.4923 19.0692 30.2383C19.0692 31.0996 19.4168 31.8798 19.9774 32.4513C18.828 32.9096 17.9039 33.8389 17.4586 35.0029C16.4997 33.8927 15.9152 32.4507 15.9152 30.8717C15.9152 27.3794 18.7562 24.5383 22.2485 24.5383C25.7408 24.5383 28.5818 27.3794 28.5818 30.8717ZM24.224 23.5413C23.5931 23.3713 22.9326 23.2717 22.2485 23.2717C20.5106 23.2717 18.9121 23.8645 17.6303 24.8501L15.1374 22.1077C16.4016 20.7498 17.1818 18.9358 17.1818 16.9383C17.1818 16.1086 17.0439 15.312 16.7968 14.564L23.7623 11.6119C24.5425 13.087 25.7946 14.2708 27.3158 14.9719L24.224 23.5413Z\" fill=\"#9B59B6\"/> </svg>`,\n  `<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"41\" height=\"41\" viewBox=\"0 0 41 41\" fill=\"none\"> <g clip-path=\"url(#clip0_35_59)\"> <path d=\"M11.1043 23.8052C10.6326 23.8052 10.25 23.4326 10.25 22.9717V14.6383C10.25 14.1784 10.6326 13.8052 11.1043 13.8052C11.5757 13.8052 11.9582 14.1784 11.9582 14.6383V22.9717C11.9582 23.4326 11.5757 23.8052 11.1043 23.8052Z\" fill=\"#34495E\"/> <path d=\"M7.68748 8.80511C5.33268 8.80511 3.41675 6.93591 3.41675 4.63824C3.41675 2.34088 5.33268 0.47168 7.68748 0.47168C10.0423 0.47168 11.9582 2.34088 11.9582 4.63824C11.9582 6.93591 10.0423 8.80511 7.68748 8.80511ZM7.68748 2.13824C6.27454 2.13824 5.12498 3.26007 5.12498 4.63824C5.12498 6.01672 6.27454 7.13824 7.68748 7.13824C9.10042 7.13824 10.25 6.01672 10.25 4.63824C10.25 3.26007 9.10042 2.13824 7.68748 2.13824Z\" fill=\"#34495E\"/> <path d=\"M6.83325 13.8052H8.54179V15.4717H6.83325V13.8052Z\" fill=\"#34495E\"/> <path d=\"M0.854271 23.8051C0.382561 23.8051 0 23.4325 0 22.9717V15.4717C0 12.7141 2.29849 10.4717 5.125 10.4717H23.9168C24.3891 10.4717 24.7707 10.8449 24.7707 11.3051V14.6382C24.7707 15.0984 24.3891 15.4717 23.9168 15.4717H11.1043C10.6326 15.4717 10.25 15.0984 10.25 14.6382C10.25 14.1783 10.6326 13.8051 11.1043 13.8051H23.0625V12.1382H5.125C3.24066 12.1382 1.70823 13.6333 1.70823 15.4717V22.9717C1.70823 23.4325 1.32567 23.8051 0.854271 23.8051Z\" fill=\"#34495E\"/> <path d=\"M4.27071 23.8051C3.79931 23.8051 3.41675 23.4324 3.41675 22.9716V20.4716C3.41675 20.0117 3.79931 19.6382 4.27071 19.6382C4.74242 19.6382 5.12498 20.0117 5.12498 20.4716V22.9716C5.12498 23.4324 4.74242 23.8051 4.27071 23.8051Z\" fill=\"#34495E\"/> <path d=\"M6.83321 32.1382C4.94887 32.1382 3.41675 30.6435 3.41675 28.8051C3.41675 26.9667 4.94887 25.4717 6.83321 25.4717C8.71754 25.4717 10.25 26.9667 10.25 28.8051C10.25 30.6435 8.71754 32.1382 6.83321 32.1382ZM6.83321 27.1382C5.89104 27.1382 5.12498 27.8859 5.12498 28.8051C5.12498 29.7243 5.89104 30.4717 6.83321 30.4717C7.77538 30.4717 8.54175 29.7243 8.54175 28.8051C8.54175 27.8859 7.77538 27.1382 6.83321 27.1382Z\" fill=\"#34495E\"/> <path d=\"M11.1043 40.4717H0.854271C0.382561 40.4717 0 40.0991 0 39.6383V37.9717C0 36.8594 0.444183 35.8135 1.2506 35.0259C2.05763 34.2391 3.13055 33.8052 4.27073 33.8052H9.39573C10.5372 33.8052 11.6098 34.2391 12.4162 35.0259C12.7493 35.3527 12.7493 35.8792 12.4152 36.2051C12.0815 36.5301 11.5406 36.5292 11.2075 36.2042C10.7242 35.7318 10.0808 35.4717 9.39573 35.4717H4.27073C3.58662 35.4717 2.9435 35.7327 2.45927 36.2042C1.97474 36.6769 1.70823 37.3043 1.70823 37.9717V38.8052H11.1043C11.5757 38.8052 11.9582 39.1775 11.9582 39.6383C11.9582 40.0991 11.5757 40.4717 11.1043 40.4717Z\" fill=\"#34495E\"/> <path d=\"M20.5 32.1382C18.6157 32.1382 17.0833 30.6435 17.0833 28.8051C17.0833 26.9667 18.6157 25.4717 20.5 25.4717C22.3844 25.4717 23.9168 26.9667 23.9168 28.8051C23.9168 30.6435 22.3844 32.1382 20.5 32.1382ZM20.5 27.1382C19.5579 27.1382 18.7918 27.8859 18.7918 28.8051C18.7918 29.7243 19.5579 30.4717 20.5 30.4717C21.4422 30.4717 22.2083 29.7243 22.2083 28.8051C22.2083 27.8859 21.4422 27.1382 20.5 27.1382Z\" fill=\"#34495E\"/> <path d=\"M26.4792 40.4717H14.5207C14.0493 40.4717 13.6667 40.0991 13.6667 39.6383V37.9717C13.6667 36.8594 14.1109 35.8135 14.917 35.0259C15.7244 34.2391 16.7973 33.8052 17.9375 33.8052H23.0625C24.2036 33.8052 25.2765 34.2391 26.0829 35.0259C26.8884 35.8126 27.3332 36.8594 27.3332 37.9717V39.6383C27.3332 40.0991 26.9516 40.4717 26.4792 40.4717ZM15.375 38.8052H25.625V37.9717C25.625 37.3043 25.3575 36.676 24.8742 36.2042C24.3906 35.7318 23.7475 35.4717 23.0625 35.4717H17.9375C17.2534 35.4717 16.6102 35.7327 16.1257 36.2042C15.6415 36.6769 15.375 37.3043 15.375 37.9717V38.8052Z\" fill=\"#34495E\"/> <path d=\"M34.1668 32.1382C32.2824 32.1382 30.75 30.6435 30.75 28.8051C30.75 26.9667 32.2824 25.4717 34.1668 25.4717C36.0511 25.4717 37.5832 26.9667 37.5832 28.8051C37.5832 30.6435 36.0511 32.1382 34.1668 32.1382ZM34.1668 27.1382C33.2246 27.1382 32.4582 27.8859 32.4582 28.8051C32.4582 29.7243 33.2246 30.4717 34.1668 30.4717C35.1089 30.4717 35.875 29.7243 35.875 28.8051C35.875 27.8859 35.1089 27.1382 34.1668 27.1382Z\" fill=\"#34495E\"/> <path d=\"M40.1458 40.4717H29.8958C29.4234 40.4717 29.0418 40.0991 29.0418 39.6383C29.0418 39.1775 29.4234 38.8052 29.8958 38.8052H39.2918V37.9717C39.2918 37.3043 39.0243 36.676 38.5407 36.2042C38.0575 35.7318 37.4143 35.4717 36.7293 35.4717H31.6043C30.9199 35.4717 30.2758 35.7327 29.7925 36.2042C29.4585 36.5301 28.9185 36.5301 28.5848 36.2042C28.2507 35.8785 28.2507 35.3518 28.5848 35.0259C29.3912 34.2391 30.4638 33.8052 31.6043 33.8052H36.7293C37.8704 33.8052 38.9433 34.2391 39.7494 35.0259C40.5549 35.8126 41 36.8594 41 37.9717V39.6383C41 40.0991 40.6181 40.4717 40.1458 40.4717Z\" fill=\"#34495E\"/> <path d=\"M38.4375 23.8051H14.5207C14.0493 23.8051 13.6667 23.4325 13.6667 22.9717C13.6667 22.5109 14.0493 22.1382 14.5207 22.1382H38.4375C38.9089 22.1382 39.2917 21.765 39.2917 21.3051V2.97168C39.2917 2.51239 38.9089 2.13824 38.4375 2.13824H14.5207C14.0493 2.13824 13.6667 1.76501 13.6667 1.30511C13.6667 0.84491 14.0493 0.47168 14.5207 0.47168H38.4375C39.8504 0.47168 41 1.5932 41 2.97168V21.3051C41 22.6833 39.8504 23.8051 38.4375 23.8051Z\" fill=\"#34495E\"/> <path d=\"M36.7292 20.4717H14.5207C14.0493 20.4717 13.6667 20.0985 13.6667 19.6383C13.6667 19.1784 14.0493 18.8052 14.5207 18.8052H36.7292C37.2016 18.8052 37.5832 19.1784 37.5832 19.6383C37.5832 20.0985 37.2016 20.4717 36.7292 20.4717Z\" fill=\"#34495E\"/> <path d=\"M20.5 3.80518H22.2082V5.47174H20.5V3.80518Z\" fill=\"#34495E\"/> <path d=\"M17.0833 3.80518H18.7918V5.47174H17.0833V3.80518Z\" fill=\"#34495E\"/> <path d=\"M13.6667 3.80518H15.375V5.47174H13.6667V3.80518Z\" fill=\"#34495E\"/> </g> <defs> <clipPath id=\"clip0_35_59\"> <rect width=\"41\" height=\"40\" fill=\"white\" transform=\"translate(0 0.47168)\"/> </clipPath> </defs> </svg>`,\n  `<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"41\" height=\"42\" viewBox=\"0 0 41 42\" fill=\"none\"> <path d=\"M40.4162 11.2322C40.4162 11.2322 40.4162 11.2322 40.4161 11.2322L40.4147 11.2308L37.7683 10.8533C37.3963 10.8003 37.1377 10.4558 37.1907 10.0838C37.2161 9.90507 37.3116 9.74383 37.456 9.63549L39.5949 8.03131C39.8955 7.80587 39.9564 7.37949 39.731 7.07887L37.2819 3.81337C37.0564 3.51275 36.63 3.45186 36.3294 3.6773L34.1912 5.28148C33.8919 5.50862 33.4651 5.45012 33.238 5.15078C33.1277 5.00545 33.0804 4.82185 33.1068 4.64131L33.485 1.99489C33.5383 1.62292 33.2801 1.27826 32.9082 1.22486C32.908 1.22486 32.9077 1.22477 32.9074 1.22477L28.8691 0.647864C28.4972 0.594459 28.1524 0.852639 28.099 1.2246C28.099 1.22469 28.099 1.22469 28.099 1.22477L27.7207 3.87119C27.6678 4.24315 27.3233 4.50176 26.9513 4.44878C26.7725 4.42335 26.6113 4.32785 26.503 4.18346L24.8995 2.04455C24.674 1.74393 24.2476 1.68305 23.947 1.90849L21.9027 3.44259C20.9778 3.34429 20.0451 3.34429 19.1202 3.44259C13.0632 4.1349 8.31332 8.9653 7.7229 15.0331C7.70453 15.2256 7.69772 15.4168 7.6882 15.608H7.48411C7.1613 15.6086 6.8833 15.836 6.81876 16.1522L6.34866 18.3877L4.46555 17.089C4.1953 16.9025 3.83031 16.9358 3.59815 17.1679L1.55721 19.2089C1.32539 19.4409 1.29223 19.8054 1.47829 20.0756L2.77089 21.9553L0.534698 22.4254C0.221924 22.4939 -0.000709277 22.7712 -2.89627e-05 23.0914V25.8127C-0.000199041 26.1345 0.22524 26.4124 0.54014 26.4787L2.77633 26.9488L1.48374 28.8285C1.29767 29.0987 1.33084 29.4632 1.56265 29.6952L3.60359 31.7362C3.83575 31.9683 4.20074 32.0016 4.47099 31.8151L6.3507 30.5191L6.8208 32.7553C6.88534 33.0715 7.16334 33.2989 7.48615 33.2995H10.2074C10.5292 33.2997 10.8071 33.0743 10.8734 32.7594L11.3435 30.5232L13.2232 31.8158C13.4934 32.0018 13.8579 31.9687 14.09 31.7369L15.1465 30.6769V32.6158C15.1495 33.5837 15.668 34.4765 16.5071 34.9588V38.7386C16.5071 40.2415 17.7255 41.4599 19.2284 41.4599H21.9496C23.4525 41.4599 24.6709 40.2415 24.6709 38.7386V34.9588C25.51 34.4765 26.0284 33.5837 26.0315 32.6158V29.9231C26.05 28.7902 26.6427 27.7442 27.6051 27.1461C28.1697 26.7798 28.7051 26.3704 29.2065 25.9215L28.299 24.9079C27.8504 25.3099 27.3711 25.6764 26.8656 26.0038C25.5147 26.8517 24.6878 28.3283 24.6709 29.9231V32.6158C24.6709 33.3673 24.0617 33.9764 23.3103 33.9764H17.8677C17.1162 33.9764 16.5071 33.3673 16.5071 32.6158V29.8667C16.4914 28.302 15.6775 26.8539 14.3492 26.027C8.95707 22.6388 7.33248 15.5211 10.7206 10.1291C12.8228 6.78353 16.4915 4.74727 20.4427 4.73315C20.4326 4.75739 20.4237 4.78213 20.4162 4.8073C20.3909 4.98589 20.4377 5.16727 20.5461 5.31142L22.1496 7.44964C22.3187 7.66845 22.3349 7.96898 22.1905 8.20479C22.0513 8.44205 21.7824 8.57148 21.5101 8.53202L18.8637 8.15377C18.4918 8.10045 18.1471 8.35871 18.0937 8.73059C18.0937 8.73084 18.0936 8.7311 18.0936 8.73135L17.516 12.7717C17.4627 13.1436 17.721 13.4884 18.0928 13.5418C18.0931 13.5418 18.0933 13.5419 18.0936 13.5419L20.74 13.9201C21.112 13.9731 21.3706 14.3176 21.3176 14.6895C21.2922 14.8683 21.1967 15.0295 21.0523 15.1379L18.9141 16.7414C18.6134 16.9668 18.5526 17.3932 18.778 17.6938L21.2271 20.9593C21.4526 21.2599 21.879 21.3208 22.1796 21.0954L24.3185 19.4919C24.6193 19.2669 25.0457 19.3284 25.2707 19.6293C25.3784 19.7733 25.4248 19.9541 25.3995 20.1321L25.0219 22.7785C24.9685 23.1504 25.2267 23.4952 25.5987 23.5486C25.5987 23.5486 25.5987 23.5486 25.5988 23.5486L29.6399 24.1262C29.6717 24.1303 29.7038 24.1323 29.7358 24.1323C30.0745 24.1327 30.3619 23.8839 30.41 23.5486L30.7876 20.9022C30.8406 20.5302 31.1851 20.2716 31.557 20.3246C31.7358 20.35 31.897 20.4455 32.0053 20.5899L33.6095 22.7281C33.835 23.0287 34.2614 23.0896 34.562 22.8642L37.8275 20.4151C38.1281 20.1896 38.189 19.7632 37.9635 19.4626L36.36 17.3244C36.1917 17.1053 36.1755 16.8052 36.3192 16.5693C36.4554 16.3288 36.7268 16.1986 36.9995 16.2427L39.646 16.6203C40.0178 16.6737 40.3627 16.4154 40.4161 16.0435C40.4161 16.0435 40.4161 16.0435 40.4161 16.0434L40.993 12.0023C41.0464 11.6303 40.7882 11.2856 40.4162 11.2322ZM17.8677 35.3371H23.3103V36.6977H17.8677V35.3371ZM17.8677 38.0583H23.3103V38.7386C23.3103 39.4901 22.7011 40.0993 21.9496 40.0993H19.2284C18.4769 40.0993 17.8677 39.4901 17.8677 38.7386V38.0583ZM12.4518 26.3263C12.8232 26.6301 13.2113 26.9129 13.6144 27.1733C14.2572 27.5795 14.7411 28.1941 14.9852 28.9142L13.526 30.3708L12.113 29.3966C11.4942 28.9702 10.647 29.1262 10.2205 29.7449C10.1183 29.8933 10.0465 30.0605 10.0094 30.2368L9.65295 31.9355H8.03584L7.67936 30.2395C7.52458 29.5041 6.80303 29.0335 6.06769 29.1882C5.89141 29.2253 5.72422 29.2971 5.57582 29.3993L4.16213 30.3708L2.9226 29.134L3.89613 27.7216C4.32294 27.1031 4.16749 26.2558 3.549 25.829C3.40052 25.7265 3.23316 25.6546 3.05662 25.6174L1.3606 25.2603V23.6438L3.05662 23.2867C3.7917 23.1308 4.26129 22.4086 4.10541 21.6734C4.06842 21.499 3.99758 21.3336 3.89681 21.1865L2.9226 19.7701L4.16213 18.5333L5.5765 19.5075C6.19551 19.9335 7.04275 19.777 7.46871 19.158C7.57076 19.0098 7.64236 18.8428 7.67936 18.6667L7.79841 18.1006C7.90743 18.8845 8.08797 19.6567 8.3379 20.4076C6.09941 20.6744 4.5011 22.7055 4.76795 24.944C5.03481 27.1825 7.06588 28.7808 9.30437 28.514C10.6519 28.3532 11.8315 27.5334 12.4518 26.3263ZM11.3952 25.3678C10.8872 26.7798 9.33073 27.5127 7.91866 27.0048C6.50658 26.4967 5.77371 24.9403 6.28165 23.5282C6.67028 22.4479 7.69594 21.7284 8.84397 21.7308C8.85281 21.7308 8.86098 21.7308 8.86982 21.7308C9.49545 23.0798 10.3498 24.3102 11.3952 25.3678ZM39.1616 15.1753L37.1887 14.8936C36.0728 14.7343 35.039 15.5097 34.8797 16.6255C34.8031 17.1614 34.9426 17.7057 35.2675 18.1387L36.4628 19.7327L34.2858 21.3655L33.0898 19.7722C32.4135 18.8703 31.1343 18.6874 30.2325 19.3636C29.7995 19.6883 29.5132 20.1718 29.4365 20.7076L29.161 22.6832L26.4676 22.2982L26.7492 20.3253C26.909 19.2095 26.134 18.1754 25.0182 18.0157C24.482 17.9389 23.9374 18.0784 23.5041 18.4034L21.9102 19.5987L20.2774 17.4217L21.8707 16.2257C22.7725 15.5495 22.9555 14.2702 22.2792 13.3685C21.9546 12.9354 21.4711 12.6491 20.9353 12.5724L18.9624 12.2908L19.3474 9.59739L21.3203 9.87904C22.4361 10.0388 23.4702 9.26379 23.6299 8.14799C23.7067 7.61181 23.5672 7.06722 23.2422 6.63395L22.0428 5.03861L24.2198 3.40586L25.4158 4.99983C26.0921 5.90167 27.3713 6.08459 28.2731 5.40836C28.7061 5.08368 28.9924 4.60023 29.0691 4.0644L29.3508 2.09149L32.0441 2.47587L31.7625 4.44878C31.6031 5.56466 32.3785 6.5984 33.4944 6.75776C34.0302 6.8343 34.5746 6.69484 35.0076 6.36999L36.6015 5.17467L38.2343 7.35168L36.6403 8.54767C35.7385 9.2239 35.5556 10.5031 36.2318 11.4049C36.5565 11.8379 37.0399 12.1243 37.5758 12.201L39.5487 12.4826L39.1616 15.1753Z\" fill=\"#F1C40F\"/> <path d=\"M29.2535 6.9436C26.2477 6.9436 23.8109 9.38032 23.8109 12.3861C23.8109 15.3919 26.2477 17.8286 29.2535 17.8286C32.2593 17.8286 34.696 15.3919 34.696 12.3861C34.6926 9.38168 32.2579 6.94692 29.2535 6.9436ZM29.2535 16.468C26.9991 16.468 25.1716 14.6405 25.1716 12.3861C25.1716 10.1317 26.9991 8.30423 29.2535 8.30423C31.5078 8.30423 33.3353 10.1317 33.3353 12.3861C33.3327 14.6394 31.5067 16.4654 29.2535 16.468Z\" fill=\"#F1C40F\"/> <path d=\"M21.2693 30.5752H19.9087V32.6161H21.2693V30.5752Z\" fill=\"#F1C40F\"/> <path d=\"M17.6133 23.8937C13.4136 22.2531 11.3391 17.5187 12.9798 13.319C13.6155 11.6917 14.7565 10.3113 16.235 9.38058L15.5077 8.22949C11.0571 11.0333 9.72209 16.9142 12.5259 21.3648C13.6118 23.0885 15.2217 24.4186 17.1194 25.1598C18.7991 25.8034 19.9083 27.4157 19.9087 29.2145H21.2693C21.2714 26.8544 19.8171 24.7379 17.6133 23.8937Z\" fill=\"#F1C40F\"/> <path d=\"M38.2772 25.813H33.515V27.1736H38.2772V25.813Z\" fill=\"#F1C40F\"/> <path d=\"M33.2702 29.3714L32.3993 30.4167L36.4815 33.8178L37.3524 32.7724L33.2702 29.3714Z\" fill=\"#F1C40F\"/> <path d=\"M30.7937 31.2554H29.4331V36.0176H30.7937V31.2554Z\" fill=\"#F1C40F\"/> <path d=\"M6.13679 10.8659L0.694656 12.2263L1.02444 13.5456L6.46658 12.1852L6.13679 10.8659Z\" fill=\"#F1C40F\"/> <path d=\"M2.61515 4.17027L1.82475 5.27686L6.58657 8.67807L7.37698 7.57148L2.61515 4.17027Z\" fill=\"#F1C40F\"/> <path d=\"M8.97192 0.47181L7.65375 0.808838L9.04517 6.25093L10.3633 5.9139L8.97192 0.47181Z\" fill=\"#F1C40F\"/> </svg>`,\n  `<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"42\" height=\"38\" viewBox=\"0 0 42 38\" fill=\"none\"> <path d=\"M16.8124 27.2141C16.6575 27.2141 16.5015 27.1608 16.3743 27.0524L11.9941 23.3228C11.843 23.1939 11.7562 23.0058 11.7562 22.8072C11.7562 22.6088 11.8434 22.4207 11.9941 22.2919L16.3743 18.5623C16.6587 18.3198 17.0859 18.3541 17.3284 18.6386C17.5705 18.9234 17.5365 19.3506 17.2517 19.5927L13.4771 22.8072L17.2517 26.0216C17.5365 26.2641 17.5705 26.6913 17.3284 26.9757C17.1943 27.1333 17.0039 27.2141 16.8124 27.2141Z\" fill=\"#E74C3C\"/> <path d=\"M25.4593 27.2141C25.2678 27.2141 25.0774 27.1333 24.9437 26.9757C24.7012 26.6913 24.7356 26.2641 25.02 26.0216L28.7947 22.8072L25.02 19.5927C24.7356 19.3506 24.7012 18.9234 24.9437 18.6386C25.1859 18.3541 25.6134 18.3198 25.8975 18.5623L30.2776 22.2919C30.4287 22.4207 30.5156 22.6088 30.5156 22.8072C30.5156 23.0058 30.4287 23.1939 30.2776 23.3228L25.8975 27.0524C25.7702 27.1608 25.6142 27.2141 25.4593 27.2141Z\" fill=\"#E74C3C\"/> <path d=\"M19.5853 30.0116C19.5388 30.0116 19.492 30.0067 19.4448 29.9968C19.0792 29.9198 18.845 29.5606 18.922 29.1949L21.6519 16.234C21.7289 15.8683 22.0877 15.6341 22.4538 15.7112C22.8194 15.7883 23.0536 16.1471 22.9765 16.5131L20.2467 29.4741C20.1795 29.7929 19.8984 30.0116 19.5853 30.0116Z\" fill=\"#E74C3C\"/> <path d=\"M37.0911 37.0728H5.18068C2.67483 37.0728 0.635864 35.0342 0.635864 32.528V5.44423C0.635864 2.93838 2.67483 0.899414 5.18068 0.899414H37.0911C39.5969 0.899414 41.6359 2.93838 41.6359 5.44423V32.528C41.6359 35.0342 39.5969 37.0728 37.0911 37.0728ZM5.18068 2.25319C3.42122 2.25319 1.98964 3.68477 1.98964 5.44423V32.528C1.98964 34.2875 3.42122 35.719 5.18068 35.719H37.0911C38.8505 35.719 40.2821 34.2875 40.2821 32.528V5.44423C40.2821 3.68477 38.8505 2.25319 37.0911 2.25319H5.18068Z\" fill=\"#E74C3C\"/> <path d=\"M40.959 11.7385H1.31275C0.938801 11.7385 0.635864 11.4356 0.635864 11.0617C0.635864 10.6881 0.938801 10.3848 1.31275 10.3848H40.959C41.3329 10.3848 41.6359 10.6881 41.6359 11.0617C41.6359 11.4356 41.3329 11.7385 40.959 11.7385Z\" fill=\"#E74C3C\"/> <path d=\"M12.2011 8.49927C11.0203 8.49927 10.059 7.53795 10.059 6.35718C10.059 5.17603 11.0203 4.21509 12.2011 4.21509C13.3823 4.21509 14.3432 5.17603 14.3432 6.35718C14.3432 7.53795 13.3823 8.49927 12.2011 8.49927ZM12.2011 5.56886C11.7667 5.56886 11.4128 5.92241 11.4128 6.35718C11.4128 6.79194 11.7667 7.14549 12.2011 7.14549C12.6359 7.14549 12.9894 6.79194 12.9894 6.35718C12.9894 5.92241 12.6359 5.56886 12.2011 5.56886Z\" fill=\"#E74C3C\"/> <path d=\"M5.6196 8.47876C4.43845 8.47876 3.47751 7.51782 3.47751 6.33667C3.47751 5.15552 4.43845 4.19458 5.6196 4.19458C6.80075 4.19458 7.76169 5.15552 7.76169 6.33667C7.76169 7.51782 6.80075 8.47876 5.6196 8.47876ZM5.6196 5.54835C5.18521 5.54835 4.83128 5.90228 4.83128 6.33667C4.83128 6.77143 5.18521 7.12499 5.6196 7.12499C6.05436 7.12499 6.40791 6.77143 6.40791 6.33667C6.40791 5.90228 6.05436 5.54835 5.6196 5.54835Z\" fill=\"#E74C3C\"/> <path d=\"M18.7826 8.51964C17.6018 8.51964 16.6409 7.5587 16.6409 6.37755C16.6409 5.19678 17.6018 4.23584 18.7826 4.23584C19.9638 4.23584 20.9247 5.19678 20.9247 6.37755C20.9247 7.5587 19.9638 8.51964 18.7826 8.51964ZM18.7826 5.58924C18.3482 5.58924 17.9947 5.94279 17.9947 6.37755C17.9947 6.81232 18.3482 7.16587 18.7826 7.16587C19.2174 7.16587 19.5709 6.81232 19.5709 6.37755C19.5709 5.94279 19.2174 5.58924 18.7826 5.58924Z\" fill=\"#E74C3C\"/> </svg>`,\n  `<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"42\" height=\"42\" viewBox=\"0 0 42 42\" fill=\"none\"> <g clip-path=\"url(#clip0_202_9)\"> <path d=\"M11.4368 33.8199V31.7678L7.79724 29.7261V35.7713C7.79724 36.0772 7.54908 36.3254 7.24318 36.3254C6.93728 36.3254 6.68912 36.0772 6.68912 35.7713V28.78C6.68912 28.5834 6.79338 28.4012 6.96323 28.3021C7.13243 28.2019 7.34232 28.2004 7.51441 28.2967L12.2618 30.9601C12.4367 31.0582 12.5449 31.243 12.5449 31.4435V33.8199C12.5449 34.1258 12.2968 34.374 11.9909 34.374C11.685 34.374 11.4368 34.1258 11.4368 33.8199ZM1.24589 28.1761V21.5719C1.24589 19.6887 3.1057 18.8458 4.94894 18.8458H5.40963C4.67387 18.1668 4.19325 17.0751 4.19325 15.8423C4.19325 13.9507 5.32947 12.7757 7.1583 12.7757C8.98744 12.7757 10.1238 13.9507 10.1238 15.8423C10.1238 17.0751 9.64312 18.1668 8.90728 18.8458H13.2555C13.4323 18.8458 13.5726 18.8227 13.7403 18.7661L15.8105 18.0668L17.2086 17.5788L20.2339 16.5101C20.5026 16.4152 20.7046 16.2757 20.8882 16.0574L21.8589 14.9034C22.9543 13.6001 23.8194 12.5706 25.4336 12.5706L26.8854 12.5549C26.0355 11.8816 25.4678 10.6939 25.4678 9.33969C25.4678 7.41261 26.6254 6.21536 28.4885 6.21536C30.3519 6.21536 31.5094 7.41253 31.5094 9.33969C31.5094 10.6697 30.9625 11.8405 30.1378 12.5197H33.5075L33.5161 9.24448C33.5161 8.37499 34.0956 7.66862 34.9038 7.44328V1.02574C34.9038 0.719682 35.1519 0.47168 35.4578 0.47168H40.467C40.6607 0.47168 40.8404 0.572898 40.9406 0.73842C41.0413 0.904022 41.0478 1.10998 40.9583 1.28167L40.3757 2.40044L40.9583 3.51921C41.0478 3.6909 41.0413 3.89686 40.9406 4.06246C40.8404 4.22806 40.6607 4.3292 40.467 4.3292H36.0119V7.45641C36.7748 7.69737 37.3332 8.40318 37.3332 9.24464V14.3846C37.3332 15.4363 36.4783 16.2919 35.4279 16.2919L33.1052 16.3846C32.6576 16.3852 32.2546 16.5536 31.9491 16.8597C31.6436 17.1657 31.4751 17.5696 31.4751 17.9966V21.6889L36.0674 24.3437C36.2388 24.4429 36.3441 24.6258 36.3441 24.8234V29.4564C36.3441 29.7623 36.0959 30.0105 35.79 30.0105C35.4841 30.0105 35.2359 29.7623 35.2359 29.4564V25.1429L30.6437 22.4881C30.4723 22.3889 30.367 22.206 30.367 22.0084V17.9965C30.367 17.2738 30.6506 16.5921 31.1649 16.0767C31.68 15.5609 32.3614 15.277 33.0832 15.277L35.4059 15.1843C35.8676 15.1837 36.2251 14.8252 36.2251 14.3846V9.24464C36.2251 8.81702 35.877 8.46908 35.4492 8.46908C34.9713 8.46908 34.6242 8.79516 34.6242 9.24464L34.617 12.629C34.617 13.2016 34.151 13.6726 33.5778 13.6786L25.4398 13.6789C24.3822 13.6789 23.8073 14.3078 22.7074 15.6165L21.736 16.7709C21.4221 17.1439 21.0622 17.393 20.6029 17.5553L18.5735 18.2722C18.7294 18.4348 18.8614 18.6249 18.9531 18.8449C19.0795 19.1481 19.1151 19.471 19.0766 19.7884L21.9752 18.8933C22.2514 18.808 22.4611 18.6742 22.6544 18.459L24.1914 16.7492C24.3451 16.5783 24.5878 16.5198 24.8018 16.6025C25.016 16.6845 25.1574 16.8903 25.1574 17.1197V31.6032C25.1574 31.9091 24.9092 32.1572 24.6033 32.1572C24.2974 32.1572 24.0493 31.9091 24.0493 31.6032V18.5645L23.4782 19.1996C23.1478 19.5672 22.7741 19.8061 22.302 19.9517L17.8958 21.3123C17.8953 21.3125 17.8949 21.3125 17.8944 21.3126L14.728 22.4422C14.4333 22.5472 14.1617 22.5941 13.8475 22.5941H12.356C11.9444 22.5941 11.5548 22.7571 11.2591 23.0536C10.9633 23.3498 10.8003 23.7405 10.8003 24.1531V26.9678L15.2832 29.5595C15.4546 29.6587 15.5599 29.8416 15.5599 30.0392V33.8199C15.5599 34.1258 15.3117 34.374 15.0058 34.374C14.6999 34.374 14.4517 34.1258 14.4517 33.8199V30.3588L9.9688 27.7671C9.79743 27.6679 9.69213 27.485 9.69213 27.2874V24.1531C9.69213 23.4447 9.97024 22.7762 10.4749 22.2705C10.9803 21.7645 11.6483 21.486 12.356 21.486H13.8475C14.034 21.486 14.1812 21.4608 14.3558 21.3983L17.5463 20.261C17.7079 20.193 17.8543 20.046 17.9318 19.8572C18.0094 19.6682 18.009 19.46 17.93 19.271C17.7673 18.8805 17.3182 18.6953 16.9294 18.8569C16.9179 18.8618 14.095 19.8158 14.095 19.8158C13.8122 19.9112 13.5532 19.9538 13.2556 19.9538H4.94902C4.68356 19.9538 2.35409 19.9993 2.35409 21.5718V28.1761C2.35409 28.8845 2.84257 29.4814 3.51635 29.7V22.4011C3.51635 22.0952 3.76451 21.847 4.07041 21.847C4.3763 21.847 4.62447 22.0952 4.62447 22.4011V30.3447C4.62447 30.3459 4.62487 30.3471 4.62487 30.3483C4.62487 30.3495 4.62447 30.3506 4.62447 30.3519V35.7712C4.62447 36.0771 4.3763 36.3253 4.07041 36.3253C3.76451 36.3253 3.51635 36.0771 3.51635 35.7712V30.849C2.22332 30.5996 1.24589 29.4962 1.24589 28.1761ZM36.0117 3.221H39.5536L39.2596 2.65629C39.1759 2.49597 39.1759 2.30475 39.2596 2.14443L39.5536 1.57972H36.0117V3.221ZM26.5759 9.33977C26.5759 10.8243 27.4337 12.0322 28.4884 12.0322C29.5431 12.0322 30.4012 10.8243 30.4012 9.33977C30.4012 7.58542 29.2029 7.32356 28.4884 7.32356C27.7742 7.32356 26.5759 7.5855 26.5759 9.33977ZM5.30137 15.8424C5.30137 17.2868 6.13426 18.4619 7.1583 18.4619C8.18234 18.4619 9.01563 17.2869 9.01563 15.8424C9.01563 14.1384 7.85193 13.8839 7.1583 13.8839C6.46466 13.8839 5.30137 14.1384 5.30137 15.8424ZM32.7058 30.0104C33.0117 30.0104 33.2598 29.7623 33.2598 29.4564V26.2597C33.2598 26.0591 33.1517 25.8745 32.9767 25.7764L28.1197 23.0519C27.9487 22.9555 27.7385 22.957 27.5689 23.0573C27.399 23.1565 27.2948 23.3387 27.2948 23.5352V31.6029C27.2948 31.9088 27.543 32.157 27.8489 32.157C28.1548 32.157 28.4029 31.9088 28.4029 31.6029V24.4814L32.1518 26.5844V29.4564C32.1517 29.7623 32.3999 30.0104 32.7058 30.0104ZM40.4669 32.1004H30.4939C30.188 32.1004 29.9399 32.3485 29.9399 32.6544V34.3224H20.5209C20.215 34.3224 19.9669 34.5705 19.9669 34.8764V36.1761H10.5479C10.242 36.1761 9.99387 36.4243 9.99387 36.7302V38.2697H0.574996C0.269097 38.2697 0.0209351 38.5178 0.0209351 38.8237V40.9177C0.0209351 41.2235 0.269097 41.4717 0.574996 41.4717C0.880894 41.4717 1.12906 41.2235 1.12906 40.9176V39.3777H9.99395V40.9176C9.99395 41.2235 10.2421 41.4717 10.548 41.4717C10.8539 41.4717 11.1021 41.2235 11.1021 40.9176V37.2842H19.967V40.9176C19.967 41.2235 20.2151 41.4717 20.521 41.4717C20.8269 41.4717 21.0751 41.2235 21.0751 40.9176V35.4304H29.94V40.9176C29.94 41.2235 30.1881 41.4717 30.494 41.4717C30.7999 41.4717 31.0481 41.2235 31.0481 40.9176V33.2085H39.913V40.9176C39.913 41.2235 40.1611 41.4717 40.467 41.4717C40.7729 41.4717 41.0211 41.2235 41.0211 40.9176V32.6544C41.0209 32.3485 40.7728 32.1004 40.4669 32.1004Z\" fill=\"#D35400\"/> </g> <defs> <clipPath id=\"clip0_202_9\"> <rect width=\"41\" height=\"41\" fill=\"white\" transform=\"translate(0.0209351 0.47168)\"/> </clipPath> </defs> </svg>`,\n  `<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"42\" height=\"42\" viewBox=\"0 0 42 42\" fill=\"none\"> <g clip-path=\"url(#clip0_35_76)\"> <path d=\"M11.6228 33.8199V31.7678L7.98328 29.7261V35.7713C7.98328 36.0772 7.73512 36.3254 7.42922 36.3254C7.12332 36.3254 6.87516 36.0772 6.87516 35.7713V28.78C6.87516 28.5834 6.97942 28.4012 7.14926 28.3021C7.31847 28.2019 7.52835 28.2004 7.70044 28.2967L12.4478 30.9601C12.6228 31.0582 12.7309 31.243 12.7309 31.4435V33.8199C12.7309 34.1258 12.4828 34.374 12.1769 34.374C11.871 34.374 11.6228 34.1258 11.6228 33.8199ZM1.43193 28.1761V21.5719C1.43193 19.6887 3.29174 18.8458 5.13498 18.8458H5.59567C4.85991 18.1668 4.37928 17.0751 4.37928 15.8423C4.37928 13.9507 5.51551 12.7757 7.34433 12.7757C9.17348 12.7757 10.3098 13.9507 10.3098 15.8423C10.3098 17.0751 9.82916 18.1668 9.09332 18.8458H13.4416C13.6183 18.8458 13.7586 18.8227 13.9264 18.7661L15.9965 18.0668L17.3946 17.5788L20.4199 16.5101C20.6886 16.4152 20.8906 16.2757 21.0742 16.0574L22.0449 14.9034C23.1404 13.6001 24.0054 12.5706 25.6196 12.5706L27.0714 12.5549C26.2215 11.8816 25.6539 10.6939 25.6539 9.33969C25.6539 7.41261 26.8114 6.21536 28.6745 6.21536C30.5379 6.21536 31.6954 7.41253 31.6954 9.33969C31.6954 10.6697 31.1485 11.8405 30.3239 12.5197H33.6936L33.7021 9.24448C33.7021 8.37499 34.2817 7.66862 35.0898 7.44328V1.02574C35.0898 0.719682 35.338 0.47168 35.6439 0.47168H40.6531C40.8468 0.47168 41.0264 0.572898 41.1267 0.73842C41.2273 0.904022 41.2338 1.10998 41.1443 1.28167L40.5618 2.40044L41.1443 3.51921C41.2338 3.6909 41.2273 3.89686 41.1267 4.06246C41.0264 4.22806 40.8468 4.3292 40.6531 4.3292H36.1979V7.45641C36.9608 7.69737 37.5192 8.40318 37.5192 9.24464V14.3846C37.5192 15.4363 36.6643 16.2919 35.6139 16.2919L33.2912 16.3846C32.8436 16.3852 32.4407 16.5536 32.1352 16.8597C31.8297 17.1657 31.6612 17.5696 31.6612 17.9966V21.6889L36.2534 24.3437C36.4248 24.4429 36.5301 24.6258 36.5301 24.8234V29.4564C36.5301 29.7623 36.2819 30.0105 35.976 30.0105C35.6701 30.0105 35.422 29.7623 35.422 29.4564V25.1429L30.8297 22.4881C30.6584 22.3889 30.5531 22.206 30.5531 22.0084V17.9965C30.5531 17.2738 30.8366 16.5921 31.351 16.0767C31.866 15.5609 32.5474 15.277 33.2692 15.277L35.5919 15.1843C36.0536 15.1837 36.4111 14.8252 36.4111 14.3846V9.24464C36.4111 8.81702 36.063 8.46908 35.6352 8.46908C35.1573 8.46908 34.8102 8.79516 34.8102 9.24464L34.803 12.629C34.803 13.2016 34.337 13.6726 33.7639 13.6786L25.6258 13.6789C24.5683 13.6789 23.9933 14.3078 22.8934 15.6165L21.922 16.7709C21.6082 17.1439 21.2482 17.393 20.789 17.5553L18.7596 18.2722C18.9155 18.4348 19.0474 18.6249 19.1391 18.8449C19.2656 19.1481 19.3011 19.471 19.2626 19.7884L22.1612 18.8933C22.4375 18.808 22.6471 18.6742 22.8404 18.459L24.3774 16.7492C24.5311 16.5783 24.7738 16.5198 24.9878 16.6025C25.2021 16.6845 25.3434 16.8903 25.3434 17.1197V31.6032C25.3434 31.9091 25.0953 32.1572 24.7894 32.1572C24.4835 32.1572 24.2353 31.9091 24.2353 31.6032V18.5645L23.6643 19.1996C23.3339 19.5672 22.9601 19.8061 22.488 19.9517L18.0819 21.3123C18.0814 21.3125 18.0809 21.3125 18.0804 21.3126L14.914 22.4422C14.6194 22.5472 14.3477 22.5941 14.0336 22.5941H12.542C12.1304 22.5941 11.7409 22.7571 11.4451 23.0536C11.1493 23.3498 10.9863 23.7405 10.9863 24.1531V26.9678L15.4692 29.5595C15.6406 29.6587 15.7459 29.8416 15.7459 30.0392V33.8199C15.7459 34.1258 15.4977 34.374 15.1918 34.374C14.8859 34.374 14.6378 34.1258 14.6378 33.8199V30.3588L10.1548 27.7671C9.98347 27.6679 9.87817 27.485 9.87817 27.2874V24.1531C9.87817 23.4447 10.1563 22.7762 10.6609 22.2705C11.1663 21.7645 11.8343 21.486 12.542 21.486H14.0336C14.2201 21.486 14.3673 21.4608 14.5418 21.3983L17.7323 20.261C17.8939 20.193 18.0404 20.046 18.1179 19.8572C18.1954 19.6682 18.1951 19.46 18.116 19.271C17.9533 18.8805 17.5042 18.6953 17.1155 18.8569C17.1039 18.8618 14.281 19.8158 14.281 19.8158C13.9982 19.9112 13.7392 19.9538 13.4416 19.9538H5.13506C4.8696 19.9538 2.54013 19.9993 2.54013 21.5718V28.1761C2.54013 28.8845 3.0286 29.4814 3.70238 29.7V22.4011C3.70238 22.0952 3.95054 21.847 4.25644 21.847C4.56234 21.847 4.8105 22.0952 4.8105 22.4011V30.3447C4.8105 30.3459 4.8109 30.3471 4.8109 30.3483C4.8109 30.3495 4.8105 30.3506 4.8105 30.3519V35.7712C4.8105 36.0771 4.56234 36.3253 4.25644 36.3253C3.95054 36.3253 3.70238 36.0771 3.70238 35.7712V30.849C2.40936 30.5996 1.43193 29.4962 1.43193 28.1761ZM36.1978 3.221H39.7396L39.4457 2.65629C39.362 2.49597 39.362 2.30475 39.4457 2.14443L39.7396 1.57972H36.1978V3.221ZM26.7619 9.33977C26.7619 10.8243 27.6197 12.0322 28.6744 12.0322C29.7291 12.0322 30.5872 10.8243 30.5872 9.33977C30.5872 7.58542 29.389 7.32356 28.6744 7.32356C27.9602 7.32356 26.7619 7.5855 26.7619 9.33977ZM5.4874 15.8424C5.4874 17.2868 6.32029 18.4619 7.34433 18.4619C8.36837 18.4619 9.20166 17.2869 9.20166 15.8424C9.20166 14.1384 8.03797 13.8839 7.34433 13.8839C6.6507 13.8839 5.4874 14.1384 5.4874 15.8424ZM32.8918 30.0104C33.1977 30.0104 33.4459 29.7623 33.4459 29.4564V26.2597C33.4459 26.0591 33.3377 25.8745 33.1627 25.7764L28.3057 23.0519C28.1348 22.9555 27.9245 22.957 27.755 23.0573C27.585 23.1565 27.4809 23.3387 27.4809 23.5352V31.6029C27.4809 31.9088 27.729 32.157 28.0349 32.157C28.3408 32.157 28.589 31.9088 28.589 31.6029V24.4814L32.3378 26.5844V29.4564C32.3378 29.7623 32.5859 30.0104 32.8918 30.0104ZM40.6529 32.1004H30.68C30.3741 32.1004 30.1259 32.3485 30.1259 32.6544V34.3224H20.707C20.4011 34.3224 20.1529 34.5705 20.1529 34.8764V36.1761H10.734C10.4281 36.1761 10.1799 36.4243 10.1799 36.7302V38.2697H0.761031C0.455132 38.2697 0.20697 38.5178 0.20697 38.8237V40.9177C0.20697 41.2235 0.455132 41.4717 0.761031 41.4717C1.06693 41.4717 1.31509 41.2235 1.31509 40.9176V39.3777H10.18V40.9176C10.18 41.2235 10.4281 41.4717 10.734 41.4717C11.0399 41.4717 11.2881 41.2235 11.2881 40.9176V37.2842H20.153V40.9176C20.153 41.2235 20.4012 41.4717 20.7071 41.4717C21.0129 41.4717 21.2611 41.2235 21.2611 40.9176V35.4304H30.126V40.9176C30.126 41.2235 30.3742 41.4717 30.6801 41.4717C30.986 41.4717 31.2341 41.2235 31.2341 40.9176V33.2085H40.099V40.9176C40.099 41.2235 40.3472 41.4717 40.6531 41.4717C40.959 41.4717 41.2071 41.2235 41.2071 40.9176V32.6544C41.207 32.3485 40.9588 32.1004 40.6529 32.1004Z\" fill=\"#95A5A6\"/> </g> <defs> <clipPath id=\"clip0_35_76\"> <rect width=\"41\" height=\"41\" fill=\"white\" transform=\"translate(0.20697 0.47168)\"/> </clipPath> </defs> </svg>`,\n];\n\nexport const colors = [\n  { name: \"Turquoise\", color: \"#1ABC9C\" },\n  { name: \"Royal Blue\", color: \"#3498DB\" },\n  { name: \"Amethyst\", color: \"#9B59B6\" },\n  { name: \"Wet Asphalt\", color: \"#34495E\" },\n  { name: \"Sunflower\", color: \"#F1C40F\" },\n  { name: \"Elegant Red\", color: \"#E74C3C\" },\n  { name: \"Mango Tango\", color: \"#D35400\" },\n  { name: \"Silver Grey\", color: \"#95A5A6\" },\n  { name: \"Forest Green\", color: \"#228B22\" },\n  { name: \"Lavender\", color: \"#E6E6FA\" },\n  { name: \"Sky Blue\", color: \"#87CEEB\" },\n  { name: \"Navy Blue\", color: \"#000080\" },\n  { name: \"Dark Chocolate\", color: \"#37000A\" },\n  { name: \"Coral\", color: \"#FF7F50\" },\n  { name: \"Salmon\", color: \"#FA8072\" },\n  { name: \"Midnight Blue\", color: \"#191970\" },\n  { name: \"Charcoal\", color: \"#36454F\" },\n  { name: \"Powder Blue\", color: \"#B0E0E6\" },\n  { name: \"Mustard Yellow\", color: \"#FFDB58\" },\n  { name: \"Orange Red\", color: \"#FF4500\" },\n  { name: \"Lime Green\", color: \"#32CD32\" },\n  { name: \"Teal\", color: \"#008080\" },\n];\n\n// #1ABC9C, #3498DB, #9B59B6, #34495E, #F1C40F, #E74C3C, #D35400, #95A5A6\n","import {\n  InspectorControls,\n  RichText,\n  useBlockProps,\n} from \"@wordpress/block-editor\";\nimport \"./editor.scss\";\nimport {\n  PanelBody,\n  Button,\n  ColorPalette,\n  TextareaControl,\n  __experimentalGrid as Grid,\n} from \"@wordpress/components\";\nimport { __ } from \"@wordpress/i18n\";\nimport { sanitizeSVG } from \"@skjnldsv/sanitize-svg\";\nconst { Fragment } = wp.element;\nimport { useEffect } from \"@wordpress/element\";\nimport { icons, colors } from \"./data\";\n\nexport default function Edit({ attributes, setAttributes }) {\n  const { title, content, icon, color } = attributes;\n  const blockProps = useBlockProps({\n    className: \"flex flex-col shadow-sm\",\n  });\n\n  useEffect(() => {\n    handleSVGChange(icon);\n  }, [color]);\n\n  const handleSVGChange = async (newSVG) => {\n    var cleanImage = await sanitizeSVG(newSVG);\n    if (!cleanImage) {\n      alert(\"Unsafe SVG Icon. Please use safe one\");\n      return;\n    }\n\n    cleanImage = modifySvg(cleanImage, color);\n    setAttributes({ icon: cleanImage });\n  };\n\n  function modifySvg(svgString, color) {\n    // Parse the SVG string into a DOM object\n    const parser = new DOMParser();\n    const doc = parser.parseFromString(svgString, \"image/svg+xml\");\n\n    // Remove width and height attributes\n    doc.documentElement.removeAttribute(\"width\");\n    doc.documentElement.removeAttribute(\"height\");\n\n    // Change all fill attributes to the specified color\n    const elementsWithFill = doc.querySelectorAll(\"[fill]\");\n    elementsWithFill.forEach((element) => {\n      element.setAttribute(\"fill\", color);\n    });\n\n    // Serialize the modified DOM object back to an SVG string\n    const serializer = new XMLSerializer();\n    const modifiedSvgString = serializer.serializeToString(doc);\n\n    return modifiedSvgString;\n  }\n\n  return (\n    <Fragment>\n      <InspectorControls>\n        <PanelBody title={__(\"Color\")}>\n          <ColorPalette\n            colors={colors}\n            value={color}\n            onChange={(color) => setAttributes({ color })}\n          />\n        </PanelBody>\n        <PanelBody title={__(\"Icon\")}>\n          <Grid columns={3}>\n            {icons.map((_icon) => {\n              return (\n                <Button\n                  onClick={() => handleSVGChange(_icon)}\n                  style={{ height: \"45px\", backgroundColor: \"white\" }}\n                >\n                  <img\n                    src={`data:image/svg+xml;utf8,${encodeURIComponent(_icon)}`}\n                    style={{ width: \"30px\", margin: \"auto\" }}\n                    alt={title}\n                  />\n                </Button>\n              );\n            })}\n          </Grid>\n\n          <TextareaControl\n            label=\"SVG icon code\"\n            help=\"Paste SVG icon code here\"\n            value={icon}\n            onChange={handleSVGChange}\n          />\n          <img\n            src={`data:image/svg+xml;utf8,${encodeURIComponent(icon)}`}\n            width=\"50%\"\n            alt={title}\n          />\n        </PanelBody>\n      </InspectorControls>\n\n      <div {...blockProps}>\n        <hr className=\"mb-2 h-1\" style={{ backgroundColor: color }} />\n        <div className=\"mx-5 flex\">\n          <RichText\n            className=\"text-balance mt-6 w-full font-light text-black lg:min-h-[3.6] xl:min-h-[4.6rem] 2xl:min-h-0\"\n            tagName=\"h3\"\n            value={title}\n            allowedFormats={[]}\n            onChange={(title) => setAttributes({ title })}\n            placeholder={__(\"Title...\")}\n          />\n          <div className=\"ml-5\">\n            <img\n              src={`data:image/svg+xml;utf8,${encodeURIComponent(icon)}`}\n              className=\"h-12 w-12\"\n              alt={title}\n            />\n          </div>\n        </div>\n        <RichText\n          className=\"mx-5 my-4  text-base font-light text-gray-600\"\n          tagName=\"p\"\n          value={content}\n          allowedFormats={[]}\n          onChange={(content) => setAttributes({ content })}\n          placeholder={__(\"Content...\")}\n        />\n      </div>\n    </Fragment>\n  );\n}\n","import { registerBlockType } from \"@wordpress/blocks\";\nimport metadata from \"./block.json\";\nimport Edit from \"./edit\";\nimport Save from \"./save\";\nimport \"./style.scss\";\n\nconst attributes = {\n  title: {\n    type: \"String\",\n    source: \"html\",\n    selector: \"h3\",\n  },\n  content: {\n    type: \"String\",\n    source: \"html\",\n    selector: \"p\",\n    default:\n      \"Lorem ipsum dolor sit amet consectetur. In non nibh tempor accumsan.\",\n  },\n  icon: {\n    type: \"String\",\n    default: `<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"41\" height=\"43\" viewBox=\"0 0 41 43\" fill=\"none\">\n\t\t<g clip-path=\"url(#clip0_35_52)\">\n\t\t  <path d=\"M38.998 34.7649H38.6253C37.9613 34.1272 37.5839 33.2411 37.5839 32.3014C37.5839 31.3617 37.9613 30.4756 38.6252 29.838H38.998C39.5323 29.838 40.035 29.6245 40.4133 29.237C40.7917 28.8494 41 28.3346 41 27.7873C41 26.6565 40.1019 25.7365 38.998 25.7365H37.1578C37.3674 25.5726 37.5683 25.3945 37.758 25.2003C38.8747 24.0562 39.487 22.535 39.4817 20.9168C39.4717 17.7982 37.1008 15.2275 34.0889 14.9351C34.1777 14.7094 34.2247 14.4661 34.2247 14.2151C34.2247 13.1554 33.3833 12.2932 32.3492 12.2932H32.0312C31.4475 11.7244 31.1159 10.9392 31.1159 10.1068C31.1159 9.27416 31.4476 8.48879 32.0316 7.92007H32.3492C32.8491 7.92007 33.3199 7.72057 33.6763 7.35684C34.0299 6.99336 34.2247 6.51077 34.2247 5.99808C34.2247 4.93872 33.3833 4.0769 32.3492 4.0769H10.0338C6.75443 4.0769 4.07854 6.77311 4.06885 10.0869C4.06364 11.7052 4.67584 13.2263 5.79261 14.3703C5.98223 14.5646 6.18315 14.7427 6.39271 14.9066H3.93432C2.89971 14.9066 2.05801 15.7684 2.05801 16.8278C2.05801 17.3412 2.25308 17.8238 2.6071 18.1865C2.96177 18.5498 3.43303 18.7497 3.93424 18.7497H4.25143C4.83535 19.3186 5.1672 20.1039 5.1672 20.9365C5.1672 21.7694 4.83528 22.5549 4.2511 23.1237H3.93432C2.89971 23.1237 2.05801 23.9855 2.05801 25.0448C2.05801 25.5575 2.25276 26.0401 2.60782 26.4052C2.74059 26.5407 2.88962 26.6534 3.05041 26.7414C1.22655 27.9009 0.0073651 29.9494 -2.08602e-06 32.28C-0.00504701 34.042 0.661443 35.6981 1.87679 36.9431C3.08757 38.1834 4.69706 38.8664 6.40873 38.8664H38.998C39.5323 38.8664 40.0349 38.653 40.4133 38.2654C40.7917 37.8778 41 37.363 41 36.8157C41 35.6849 40.1019 34.7649 38.998 34.7649ZM39.7988 27.7873C39.7988 28.006 39.7154 28.2118 39.5639 28.367C39.4124 28.5221 39.2115 28.6076 38.998 28.6076H34.1954V26.967H38.998C39.4396 26.967 39.7988 27.335 39.7988 27.7873ZM6.64208 13.5004C5.75313 12.5899 5.26585 11.3791 5.27002 10.0909C5.27779 7.45331 7.41475 5.30745 10.0338 5.30745H32.3492C32.721 5.30745 33.0235 5.61729 33.0235 5.99816C33.0235 6.18306 32.9532 6.35713 32.827 6.48682C32.6988 6.61766 32.5291 6.68968 32.3492 6.68968H13.152C12.8203 6.68968 12.5514 6.96514 12.5514 7.30492C12.5514 7.64469 12.8203 7.92015 13.152 7.92015H30.5054C30.1229 8.57238 29.9146 9.32477 29.9146 10.1069C29.9146 10.8889 30.1228 11.6412 30.5051 12.2932H9.95539C9.3765 12.2932 8.83422 12.0588 8.42846 11.633C8.02294 11.2076 7.80721 10.6465 7.82115 10.053C7.84877 8.87696 8.82917 7.92015 10.0066 7.92015H10.7497C11.0814 7.92015 11.3503 7.64469 11.3503 7.30492C11.3503 6.96514 11.0814 6.68968 10.7497 6.68968H10.0066C8.1827 6.68968 6.66354 8.18511 6.62022 10.0234C6.59852 10.951 6.93548 11.828 7.5689 12.4926C8.20264 13.1575 9.05019 13.5237 9.95539 13.5237H32.3492C32.721 13.5237 33.0235 13.8339 33.0235 14.2152C33.0235 14.4 32.9534 14.5735 32.8263 14.7038C32.6985 14.8346 32.529 14.9068 32.3492 14.9068H9.95539C8.70393 14.9068 7.52718 14.4073 6.64208 13.5004ZM3.45649 17.3165C3.32925 17.1862 3.25918 17.0127 3.25918 16.8278C3.25918 16.447 3.56203 16.1371 3.93432 16.1371H9.95531H32.3492H33.5159C36.1347 16.1371 38.2721 18.2831 38.2805 20.9208C38.2847 22.2088 37.7974 23.4195 36.9085 24.3301C36.1665 25.0903 35.2194 25.5628 34.1954 25.6962V24.2982C34.8701 24.1731 35.4894 23.8383 35.9803 23.3232C36.614 22.6583 36.9511 21.781 36.9295 20.8533C36.8872 19.0149 35.3684 17.5193 33.544 17.5193H3.93432C3.7539 17.5194 3.58421 17.4473 3.45649 17.3165ZM5.77771 18.7499H33.544C34.7215 18.7499 35.7015 19.7066 35.7286 20.8826C35.7425 21.4765 35.5267 22.038 35.1208 22.4638C34.8599 22.7375 34.5425 22.9317 34.1954 23.0357V21.749C34.1954 21.4092 33.9266 21.1337 33.5949 21.1337H21.7157C21.3839 21.1337 21.1151 21.4092 21.1151 21.749C21.1151 22.0888 21.3839 22.3642 21.7157 22.3642H25.7694V23.1238H5.77747C6.16001 22.4715 6.36845 21.719 6.36845 20.9367C6.36845 20.1545 6.16009 19.4021 5.77771 18.7499ZM26.9706 22.3642H32.9943V31.0867L30.2586 29.635C30.1721 29.589 30.0772 29.5661 29.9824 29.5661C29.8877 29.5661 29.7928 29.589 29.7062 29.6351L26.9706 31.0867L26.9706 22.3642ZM3.93432 24.3542H25.7694V25.7364H3.93432C3.75382 25.7364 3.58389 25.6644 3.45721 25.5351C3.32949 25.4039 3.25918 25.2298 3.25918 25.0449C3.25926 24.6641 3.56211 24.3542 3.93432 24.3542ZM39.5639 37.3954C39.4124 37.5506 39.2114 37.636 38.998 37.636H6.40873C5.01793 37.636 3.7101 37.0809 2.72626 36.073C1.73865 35.0614 1.19709 33.7156 1.20117 32.2838C1.21038 29.3521 3.58526 26.967 6.49513 26.967H25.7693V28.6076H6.46479C4.49246 28.6076 2.85014 30.2242 2.80369 32.2114C2.78055 33.2145 3.14499 34.1626 3.82997 34.8811C4.51496 35.5996 5.43074 35.9953 6.40865 35.9953H28.3004C28.6322 35.9953 28.901 35.7199 28.901 35.3801C28.901 35.0403 28.6322 34.7649 28.3004 34.7649H6.40873C5.75705 34.7649 5.14638 34.5008 4.68937 34.0214C4.23229 33.542 3.98909 32.9095 4.00454 32.2407C4.03553 30.9159 5.13917 29.8381 6.46479 29.8381H25.7694V32.0982C25.7694 32.313 25.8787 32.5122 26.0579 32.6239C26.2371 32.7355 26.4601 32.7433 26.6463 32.6444L29.9824 30.874L33.3187 32.6444C33.4055 32.6905 33.5004 32.7134 33.5949 32.7134C33.7033 32.7134 33.8114 32.6834 33.907 32.6239C34.0861 32.5122 34.1955 32.313 34.1955 32.0982V29.838H37.0793C36.6292 30.5661 36.3827 31.4161 36.3827 32.3014C36.3827 33.1868 36.6292 34.0367 37.0794 34.7649H30.7027C30.371 34.7649 30.1022 35.0403 30.1022 35.3801C30.1022 35.7199 30.371 35.9953 30.7027 35.9953H38.998C39.4396 35.9953 39.7988 36.3633 39.7988 36.8157C39.7988 37.0343 39.7154 37.2402 39.5639 37.3954Z\" fill=\"#1ABC9C\"/>\n\t\t</g>\n\t\t<defs>\n\t\t  <clipPath id=\"clip0_35_52\">\n\t\t\t<rect width=\"41\" height=\"42\" fill=\"white\" transform=\"translate(0 0.47168)\"/>\n\t\t  </clipPath>\n\t\t</defs>\n\t  </svg>`,\n  },\n  color: {\n    type: \"String\",\n    default: \"#1ABC9C\",\n  },\n};\n\nregisterBlockType(metadata, {\n  attributes,\n  edit: Edit,\n  save: Save,\n});\n","import { RichText } from \"@wordpress/block-editor\";\n\nexport default function save({ attributes }) {\n  const { title, content, icon, color } = attributes;\n\n  return (\n    <div className=\"flex flex-col shadow-sm\">\n      <hr className=\"mb-2 h-1\" style={{ backgroundColor: color }} />\n      <div className=\"mx-5 flex\">\n        <RichText.Content\n          tagName=\"h3\"\n          value={title}\n          className=\"text-balance mt-6 w-full font-light text-black lg:min-h-[3.6] xl:min-h-[4.6rem] 2xl:min-h-0\"\n        />\n        <div className=\"ml-5\">\n          <img\n            src={`data:image/svg+xml;utf8,${encodeURIComponent(icon)}`}\n            className=\"h-12 w-12\"\n            alt={title}\n          />\n        </div>\n      </div>\n      <RichText.Content\n        tagName=\"p\"\n        value={content}\n        className=\"mx-5 my-4  text-base font-light text-gray-600\"\n      />\n    </div>\n  );\n}\n","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\nvar customInspectSymbol =\n  (typeof Symbol === 'function' && typeof Symbol['for'] === 'function') // eslint-disable-line dot-notation\n    ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation\n    : null\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\nvar K_MAX_LENGTH = 0x7fffffff\nexports.kMaxLength = K_MAX_LENGTH\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Print warning and recommend using `buffer` v4.x which has an Object\n *               implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * We report that the browser does not support typed arrays if the are not subclassable\n * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\n * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\n * for __proto__ and has a buggy typed array implementation.\n */\nBuffer.TYPED_ARRAY_SUPPORT = typedArraySupport()\n\nif (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&\n    typeof console.error === 'function') {\n  console.error(\n    'This browser lacks typed array (Uint8Array) support which is required by ' +\n    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'\n  )\n}\n\nfunction typedArraySupport () {\n  // Can typed array instances can be augmented?\n  try {\n    var arr = new Uint8Array(1)\n    var proto = { foo: function () { return 42 } }\n    Object.setPrototypeOf(proto, Uint8Array.prototype)\n    Object.setPrototypeOf(arr, proto)\n    return arr.foo() === 42\n  } catch (e) {\n    return false\n  }\n}\n\nObject.defineProperty(Buffer.prototype, 'parent', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.buffer\n  }\n})\n\nObject.defineProperty(Buffer.prototype, 'offset', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.byteOffset\n  }\n})\n\nfunction createBuffer (length) {\n  if (length > K_MAX_LENGTH) {\n    throw new RangeError('The value \"' + length + '\" is invalid for option \"size\"')\n  }\n  // Return an augmented `Uint8Array` instance\n  var buf = new Uint8Array(length)\n  Object.setPrototypeOf(buf, Buffer.prototype)\n  return buf\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new TypeError(\n        'The \"string\" argument must be of type string. Received type number'\n      )\n    }\n    return allocUnsafe(arg)\n  }\n  return from(arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\nfunction from (value, encodingOrOffset, length) {\n  if (typeof value === 'string') {\n    return fromString(value, encodingOrOffset)\n  }\n\n  if (ArrayBuffer.isView(value)) {\n    return fromArrayView(value)\n  }\n\n  if (value == null) {\n    throw new TypeError(\n      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n      'or Array-like Object. Received type ' + (typeof value)\n    )\n  }\n\n  if (isInstance(value, ArrayBuffer) ||\n      (value && isInstance(value.buffer, ArrayBuffer))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof SharedArrayBuffer !== 'undefined' &&\n      (isInstance(value, SharedArrayBuffer) ||\n      (value && isInstance(value.buffer, SharedArrayBuffer)))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'number') {\n    throw new TypeError(\n      'The \"value\" argument must not be of type number. Received type number'\n    )\n  }\n\n  var valueOf = value.valueOf && value.valueOf()\n  if (valueOf != null && valueOf !== value) {\n    return Buffer.from(valueOf, encodingOrOffset, length)\n  }\n\n  var b = fromObject(value)\n  if (b) return b\n\n  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&\n      typeof value[Symbol.toPrimitive] === 'function') {\n    return Buffer.from(\n      value[Symbol.toPrimitive]('string'), encodingOrOffset, length\n    )\n  }\n\n  throw new TypeError(\n    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n    'or Array-like Object. Received type ' + (typeof value)\n  )\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(value, encodingOrOffset, length)\n}\n\n// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:\n// https://github.com/feross/buffer/pull/148\nObject.setPrototypeOf(Buffer.prototype, Uint8Array.prototype)\nObject.setPrototypeOf(Buffer, Uint8Array)\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be of type number')\n  } else if (size < 0) {\n    throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"')\n  }\n}\n\nfunction alloc (size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpreted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(size).fill(fill, encoding)\n      : createBuffer(size).fill(fill)\n  }\n  return createBuffer(size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(size, fill, encoding)\n}\n\nfunction allocUnsafe (size) {\n  assertSize(size)\n  return createBuffer(size < 0 ? 0 : checked(size) | 0)\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(size)\n}\n\nfunction fromString (string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('Unknown encoding: ' + encoding)\n  }\n\n  var length = byteLength(string, encoding) | 0\n  var buf = createBuffer(length)\n\n  var actual = buf.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    buf = buf.slice(0, actual)\n  }\n\n  return buf\n}\n\nfunction fromArrayLike (array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  var buf = createBuffer(length)\n  for (var i = 0; i < length; i += 1) {\n    buf[i] = array[i] & 255\n  }\n  return buf\n}\n\nfunction fromArrayView (arrayView) {\n  if (isInstance(arrayView, Uint8Array)) {\n    var copy = new Uint8Array(arrayView)\n    return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength)\n  }\n  return fromArrayLike(arrayView)\n}\n\nfunction fromArrayBuffer (array, byteOffset, length) {\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\"offset\" is outside of buffer bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\"length\" is outside of buffer bounds')\n  }\n\n  var buf\n  if (byteOffset === undefined && length === undefined) {\n    buf = new Uint8Array(array)\n  } else if (length === undefined) {\n    buf = new Uint8Array(array, byteOffset)\n  } else {\n    buf = new Uint8Array(array, byteOffset, length)\n  }\n\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(buf, Buffer.prototype)\n\n  return buf\n}\n\nfunction fromObject (obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    var buf = createBuffer(len)\n\n    if (buf.length === 0) {\n      return buf\n    }\n\n    obj.copy(buf, 0, 0, len)\n    return buf\n  }\n\n  if (obj.length !== undefined) {\n    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {\n      return createBuffer(0)\n    }\n    return fromArrayLike(obj)\n  }\n\n  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {\n    return fromArrayLike(obj.data)\n  }\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= K_MAX_LENGTH) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return b != null && b._isBuffer === true &&\n    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false\n}\n\nBuffer.compare = function compare (a, b) {\n  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)\n  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError(\n      'The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array'\n    )\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!Array.isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (isInstance(buf, Uint8Array)) {\n      if (pos + buf.length > buffer.length) {\n        Buffer.from(buf).copy(buffer, pos)\n      } else {\n        Uint8Array.prototype.set.call(\n          buffer,\n          buf,\n          pos\n        )\n      }\n    } else if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    } else {\n      buf.copy(buffer, pos)\n    }\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    throw new TypeError(\n      'The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. ' +\n      'Received type ' + typeof string\n    )\n  }\n\n  var len = string.length\n  var mustMatch = (arguments.length > 2 && arguments[2] === true)\n  if (!mustMatch && len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) {\n          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8\n        }\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coercion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)\n// to detect a Buffer instance. It's not possible to use `instanceof Buffer`\n// reliably in a browserify context because there could be multiple different\n// copies of the 'buffer' package in use. This method works even for Buffer\n// instances that were created from another copy of the `buffer` package.\n// See: https://github.com/feross/buffer/issues/154\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.toLocaleString = Buffer.prototype.toString\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()\n  if (this.length > max) str += ' ... '\n  return '<Buffer ' + str + '>'\n}\nif (customInspectSymbol) {\n  Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (isInstance(target, Uint8Array)) {\n    target = Buffer.from(target, target.offset, target.byteLength)\n  }\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError(\n      'The \"target\" argument must be one of type Buffer or Uint8Array. ' +\n      'Received type ' + (typeof target)\n    )\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset // Coerce to Number.\n  if (numberIsNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  var strLen = string.length\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (numberIsNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset >>> 0\n    if (isFinite(length)) {\n      length = length >>> 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return asciiWrite(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF)\n      ? 4\n      : (firstByte > 0xDF)\n          ? 3\n          : (firstByte > 0xBF)\n              ? 2\n              : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += hexSliceLookupTable[buf[i]]\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)\n  for (var i = 0; i < bytes.length - 1; i += 2) {\n    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf = this.subarray(start, end)\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(newBuf, Buffer.prototype)\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUintLE =\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUintBE =\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUint8 =\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUint16LE =\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUint16BE =\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUint32LE =\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUint32BE =\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUintLE =\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUintBE =\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUint8 =\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeUint16LE =\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint16BE =\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint32LE =\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset + 3] = (value >>> 24)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 1] = (value >>> 8)\n  this[offset] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeUint32BE =\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    var limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    var limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 3] = (value >>> 24)\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n\n  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {\n    // Use built-in when available, missing from IE11\n    this.copyWithin(targetStart, start, end)\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, end),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if ((encoding === 'utf8' && code < 128) ||\n          encoding === 'latin1') {\n        // Fast path: If `val` fits into a single byte, use that numeric value.\n        val = code\n      }\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  } else if (typeof val === 'boolean') {\n    val = Number(val)\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : Buffer.from(val, encoding)\n    var len = bytes.length\n    if (len === 0) {\n      throw new TypeError('The value \"' + val +\n        '\" is invalid for argument \"value\"')\n    }\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node takes equal signs as end of the Base64 encoding\n  str = str.split('=')[0]\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = str.trim().replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\n// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass\n// the `instanceof` check but they should be treated as of that type.\n// See: https://github.com/feross/buffer/issues/166\nfunction isInstance (obj, type) {\n  return obj instanceof type ||\n    (obj != null && obj.constructor != null && obj.constructor.name != null &&\n      obj.constructor.name === type.name)\n}\nfunction numberIsNaN (obj) {\n  // For IE11 support\n  return obj !== obj // eslint-disable-line no-self-compare\n}\n\n// Create lookup table for `toString('hex')`\n// See: https://github.com/feross/buffer/issues/219\nvar hexSliceLookupTable = (function () {\n  var alphabet = '0123456789abcdef'\n  var table = new Array(256)\n  for (var i = 0; i < 16; ++i) {\n    var i16 = i * 16\n    for (var j = 0; j < 16; ++j) {\n      table[i16 + j] = alphabet[i] + alphabet[j]\n    }\n  }\n  return table\n})()\n","'use strict';\n\nconst validator = require('./validator');\nconst XMLParser = require('./xmlparser/XMLParser');\nconst XMLBuilder = require('./xmlbuilder/json2xml');\n\nmodule.exports = {\n  XMLParser: XMLParser,\n  XMLValidator: validator,\n  XMLBuilder: XMLBuilder\n}","'use strict';\n\nconst nameStartChar = ':A-Za-z_\\\\u00C0-\\\\u00D6\\\\u00D8-\\\\u00F6\\\\u00F8-\\\\u02FF\\\\u0370-\\\\u037D\\\\u037F-\\\\u1FFF\\\\u200C-\\\\u200D\\\\u2070-\\\\u218F\\\\u2C00-\\\\u2FEF\\\\u3001-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFFD';\nconst nameChar = nameStartChar + '\\\\-.\\\\d\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040';\nconst nameRegexp = '[' + nameStartChar + '][' + nameChar + ']*'\nconst regexName = new RegExp('^' + nameRegexp + '$');\n\nconst getAllMatches = function(string, regex) {\n  const matches = [];\n  let match = regex.exec(string);\n  while (match) {\n    const allmatches = [];\n    allmatches.startIndex = regex.lastIndex - match[0].length;\n    const len = match.length;\n    for (let index = 0; index < len; index++) {\n      allmatches.push(match[index]);\n    }\n    matches.push(allmatches);\n    match = regex.exec(string);\n  }\n  return matches;\n};\n\nconst isName = function(string) {\n  const match = regexName.exec(string);\n  return !(match === null || typeof match === 'undefined');\n};\n\nexports.isExist = function(v) {\n  return typeof v !== 'undefined';\n};\n\nexports.isEmptyObject = function(obj) {\n  return Object.keys(obj).length === 0;\n};\n\n/**\n * Copy all the properties of a into b.\n * @param {*} target\n * @param {*} a\n */\nexports.merge = function(target, a, arrayMode) {\n  if (a) {\n    const keys = Object.keys(a); // will return an array of own properties\n    const len = keys.length; //don't make it inline\n    for (let i = 0; i < len; i++) {\n      if (arrayMode === 'strict') {\n        target[keys[i]] = [ a[keys[i]] ];\n      } else {\n        target[keys[i]] = a[keys[i]];\n      }\n    }\n  }\n};\n/* exports.merge =function (b,a){\n  return Object.assign(b,a);\n} */\n\nexports.getValue = function(v) {\n  if (exports.isExist(v)) {\n    return v;\n  } else {\n    return '';\n  }\n};\n\n// const fakeCall = function(a) {return a;};\n// const fakeCallNoReturn = function() {};\n\nexports.isName = isName;\nexports.getAllMatches = getAllMatches;\nexports.nameRegexp = nameRegexp;\n","'use strict';\n\nconst util = require('./util');\n\nconst defaultOptions = {\n  allowBooleanAttributes: false, //A tag can have attributes without any value\n  unpairedTags: []\n};\n\n//const tagsPattern = new RegExp(\"<\\\\/?([\\\\w:\\\\-_\\.]+)\\\\s*\\/?>\",\"g\");\nexports.validate = function (xmlData, options) {\n  options = Object.assign({}, defaultOptions, options);\n\n  //xmlData = xmlData.replace(/(\\r\\n|\\n|\\r)/gm,\"\");//make it single line\n  //xmlData = xmlData.replace(/(^\\s*<\\?xml.*?\\?>)/g,\"\");//Remove XML starting tag\n  //xmlData = xmlData.replace(/(<!DOCTYPE[\\s\\w\\\"\\.\\/\\-\\:]+(\\[.*\\])*\\s*>)/g,\"\");//Remove DOCTYPE\n  const tags = [];\n  let tagFound = false;\n\n  //indicates that the root tag has been closed (aka. depth 0 has been reached)\n  let reachedRoot = false;\n\n  if (xmlData[0] === '\\ufeff') {\n    // check for byte order mark (BOM)\n    xmlData = xmlData.substr(1);\n  }\n  \n  for (let i = 0; i < xmlData.length; i++) {\n\n    if (xmlData[i] === '<' && xmlData[i+1] === '?') {\n      i+=2;\n      i = readPI(xmlData,i);\n      if (i.err) return i;\n    }else if (xmlData[i] === '<') {\n      //starting of tag\n      //read until you reach to '>' avoiding any '>' in attribute value\n      let tagStartPos = i;\n      i++;\n      \n      if (xmlData[i] === '!') {\n        i = readCommentAndCDATA(xmlData, i);\n        continue;\n      } else {\n        let closingTag = false;\n        if (xmlData[i] === '/') {\n          //closing tag\n          closingTag = true;\n          i++;\n        }\n        //read tagname\n        let tagName = '';\n        for (; i < xmlData.length &&\n          xmlData[i] !== '>' &&\n          xmlData[i] !== ' ' &&\n          xmlData[i] !== '\\t' &&\n          xmlData[i] !== '\\n' &&\n          xmlData[i] !== '\\r'; i++\n        ) {\n          tagName += xmlData[i];\n        }\n        tagName = tagName.trim();\n        //console.log(tagName);\n\n        if (tagName[tagName.length - 1] === '/') {\n          //self closing tag without attributes\n          tagName = tagName.substring(0, tagName.length - 1);\n          //continue;\n          i--;\n        }\n        if (!validateTagName(tagName)) {\n          let msg;\n          if (tagName.trim().length === 0) {\n            msg = \"Invalid space after '<'.\";\n          } else {\n            msg = \"Tag '\"+tagName+\"' is an invalid name.\";\n          }\n          return getErrorObject('InvalidTag', msg, getLineNumberForPosition(xmlData, i));\n        }\n\n        const result = readAttributeStr(xmlData, i);\n        if (result === false) {\n          return getErrorObject('InvalidAttr', \"Attributes for '\"+tagName+\"' have open quote.\", getLineNumberForPosition(xmlData, i));\n        }\n        let attrStr = result.value;\n        i = result.index;\n\n        if (attrStr[attrStr.length - 1] === '/') {\n          //self closing tag\n          const attrStrStart = i - attrStr.length;\n          attrStr = attrStr.substring(0, attrStr.length - 1);\n          const isValid = validateAttributeString(attrStr, options);\n          if (isValid === true) {\n            tagFound = true;\n            //continue; //text may presents after self closing tag\n          } else {\n            //the result from the nested function returns the position of the error within the attribute\n            //in order to get the 'true' error line, we need to calculate the position where the attribute begins (i - attrStr.length) and then add the position within the attribute\n            //this gives us the absolute index in the entire xml, which we can use to find the line at last\n            return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, attrStrStart + isValid.err.line));\n          }\n        } else if (closingTag) {\n          if (!result.tagClosed) {\n            return getErrorObject('InvalidTag', \"Closing tag '\"+tagName+\"' doesn't have proper closing.\", getLineNumberForPosition(xmlData, i));\n          } else if (attrStr.trim().length > 0) {\n            return getErrorObject('InvalidTag', \"Closing tag '\"+tagName+\"' can't have attributes or invalid starting.\", getLineNumberForPosition(xmlData, tagStartPos));\n          } else {\n            const otg = tags.pop();\n            if (tagName !== otg.tagName) {\n              let openPos = getLineNumberForPosition(xmlData, otg.tagStartPos);\n              return getErrorObject('InvalidTag',\n                \"Expected closing tag '\"+otg.tagName+\"' (opened in line \"+openPos.line+\", col \"+openPos.col+\") instead of closing tag '\"+tagName+\"'.\",\n                getLineNumberForPosition(xmlData, tagStartPos));\n            }\n\n            //when there are no more tags, we reached the root level.\n            if (tags.length == 0) {\n              reachedRoot = true;\n            }\n          }\n        } else {\n          const isValid = validateAttributeString(attrStr, options);\n          if (isValid !== true) {\n            //the result from the nested function returns the position of the error within the attribute\n            //in order to get the 'true' error line, we need to calculate the position where the attribute begins (i - attrStr.length) and then add the position within the attribute\n            //this gives us the absolute index in the entire xml, which we can use to find the line at last\n            return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, i - attrStr.length + isValid.err.line));\n          }\n\n          //if the root level has been reached before ...\n          if (reachedRoot === true) {\n            return getErrorObject('InvalidXml', 'Multiple possible root nodes found.', getLineNumberForPosition(xmlData, i));\n          } else if(options.unpairedTags.indexOf(tagName) !== -1){\n            //don't push into stack\n          } else {\n            tags.push({tagName, tagStartPos});\n          }\n          tagFound = true;\n        }\n\n        //skip tag text value\n        //It may include comments and CDATA value\n        for (i++; i < xmlData.length; i++) {\n          if (xmlData[i] === '<') {\n            if (xmlData[i + 1] === '!') {\n              //comment or CADATA\n              i++;\n              i = readCommentAndCDATA(xmlData, i);\n              continue;\n            } else if (xmlData[i+1] === '?') {\n              i = readPI(xmlData, ++i);\n              if (i.err) return i;\n            } else{\n              break;\n            }\n          } else if (xmlData[i] === '&') {\n            const afterAmp = validateAmpersand(xmlData, i);\n            if (afterAmp == -1)\n              return getErrorObject('InvalidChar', \"char '&' is not expected.\", getLineNumberForPosition(xmlData, i));\n            i = afterAmp;\n          }else{\n            if (reachedRoot === true && !isWhiteSpace(xmlData[i])) {\n              return getErrorObject('InvalidXml', \"Extra text at the end\", getLineNumberForPosition(xmlData, i));\n            }\n          }\n        } //end of reading tag text value\n        if (xmlData[i] === '<') {\n          i--;\n        }\n      }\n    } else {\n      if ( isWhiteSpace(xmlData[i])) {\n        continue;\n      }\n      return getErrorObject('InvalidChar', \"char '\"+xmlData[i]+\"' is not expected.\", getLineNumberForPosition(xmlData, i));\n    }\n  }\n\n  if (!tagFound) {\n    return getErrorObject('InvalidXml', 'Start tag expected.', 1);\n  }else if (tags.length == 1) {\n      return getErrorObject('InvalidTag', \"Unclosed tag '\"+tags[0].tagName+\"'.\", getLineNumberForPosition(xmlData, tags[0].tagStartPos));\n  }else if (tags.length > 0) {\n      return getErrorObject('InvalidXml', \"Invalid '\"+\n          JSON.stringify(tags.map(t => t.tagName), null, 4).replace(/\\r?\\n/g, '')+\n          \"' found.\", {line: 1, col: 1});\n  }\n\n  return true;\n};\n\nfunction isWhiteSpace(char){\n  return char === ' ' || char === '\\t' || char === '\\n'  || char === '\\r';\n}\n/**\n * Read Processing insstructions and skip\n * @param {*} xmlData\n * @param {*} i\n */\nfunction readPI(xmlData, i) {\n  const start = i;\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] == '?' || xmlData[i] == ' ') {\n      //tagname\n      const tagname = xmlData.substr(start, i - start);\n      if (i > 5 && tagname === 'xml') {\n        return getErrorObject('InvalidXml', 'XML declaration allowed only at the start of the document.', getLineNumberForPosition(xmlData, i));\n      } else if (xmlData[i] == '?' && xmlData[i + 1] == '>') {\n        //check if valid attribut string\n        i++;\n        break;\n      } else {\n        continue;\n      }\n    }\n  }\n  return i;\n}\n\nfunction readCommentAndCDATA(xmlData, i) {\n  if (xmlData.length > i + 5 && xmlData[i + 1] === '-' && xmlData[i + 2] === '-') {\n    //comment\n    for (i += 3; i < xmlData.length; i++) {\n      if (xmlData[i] === '-' && xmlData[i + 1] === '-' && xmlData[i + 2] === '>') {\n        i += 2;\n        break;\n      }\n    }\n  } else if (\n    xmlData.length > i + 8 &&\n    xmlData[i + 1] === 'D' &&\n    xmlData[i + 2] === 'O' &&\n    xmlData[i + 3] === 'C' &&\n    xmlData[i + 4] === 'T' &&\n    xmlData[i + 5] === 'Y' &&\n    xmlData[i + 6] === 'P' &&\n    xmlData[i + 7] === 'E'\n  ) {\n    let angleBracketsCount = 1;\n    for (i += 8; i < xmlData.length; i++) {\n      if (xmlData[i] === '<') {\n        angleBracketsCount++;\n      } else if (xmlData[i] === '>') {\n        angleBracketsCount--;\n        if (angleBracketsCount === 0) {\n          break;\n        }\n      }\n    }\n  } else if (\n    xmlData.length > i + 9 &&\n    xmlData[i + 1] === '[' &&\n    xmlData[i + 2] === 'C' &&\n    xmlData[i + 3] === 'D' &&\n    xmlData[i + 4] === 'A' &&\n    xmlData[i + 5] === 'T' &&\n    xmlData[i + 6] === 'A' &&\n    xmlData[i + 7] === '['\n  ) {\n    for (i += 8; i < xmlData.length; i++) {\n      if (xmlData[i] === ']' && xmlData[i + 1] === ']' && xmlData[i + 2] === '>') {\n        i += 2;\n        break;\n      }\n    }\n  }\n\n  return i;\n}\n\nconst doubleQuote = '\"';\nconst singleQuote = \"'\";\n\n/**\n * Keep reading xmlData until '<' is found outside the attribute value.\n * @param {string} xmlData\n * @param {number} i\n */\nfunction readAttributeStr(xmlData, i) {\n  let attrStr = '';\n  let startChar = '';\n  let tagClosed = false;\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] === doubleQuote || xmlData[i] === singleQuote) {\n      if (startChar === '') {\n        startChar = xmlData[i];\n      } else if (startChar !== xmlData[i]) {\n        //if vaue is enclosed with double quote then single quotes are allowed inside the value and vice versa\n      } else {\n        startChar = '';\n      }\n    } else if (xmlData[i] === '>') {\n      if (startChar === '') {\n        tagClosed = true;\n        break;\n      }\n    }\n    attrStr += xmlData[i];\n  }\n  if (startChar !== '') {\n    return false;\n  }\n\n  return {\n    value: attrStr,\n    index: i,\n    tagClosed: tagClosed\n  };\n}\n\n/**\n * Select all the attributes whether valid or invalid.\n */\nconst validAttrStrRegxp = new RegExp('(\\\\s*)([^\\\\s=]+)(\\\\s*=)?(\\\\s*([\\'\"])(([\\\\s\\\\S])*?)\\\\5)?', 'g');\n\n//attr, =\"sd\", a=\"amit's\", a=\"sd\"b=\"saf\", ab  cd=\"\"\n\nfunction validateAttributeString(attrStr, options) {\n  //console.log(\"start:\"+attrStr+\":end\");\n\n  //if(attrStr.trim().length === 0) return true; //empty string\n\n  const matches = util.getAllMatches(attrStr, validAttrStrRegxp);\n  const attrNames = {};\n\n  for (let i = 0; i < matches.length; i++) {\n    if (matches[i][1].length === 0) {\n      //nospace before attribute name: a=\"sd\"b=\"saf\"\n      return getErrorObject('InvalidAttr', \"Attribute '\"+matches[i][2]+\"' has no space in starting.\", getPositionFromMatch(matches[i]))\n    } else if (matches[i][3] !== undefined && matches[i][4] === undefined) {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+matches[i][2]+\"' is without value.\", getPositionFromMatch(matches[i]));\n    } else if (matches[i][3] === undefined && !options.allowBooleanAttributes) {\n      //independent attribute: ab\n      return getErrorObject('InvalidAttr', \"boolean attribute '\"+matches[i][2]+\"' is not allowed.\", getPositionFromMatch(matches[i]));\n    }\n    /* else if(matches[i][6] === undefined){//attribute without value: ab=\n                    return { err: { code:\"InvalidAttr\",msg:\"attribute \" + matches[i][2] + \" has no value assigned.\"}};\n                } */\n    const attrName = matches[i][2];\n    if (!validateAttrName(attrName)) {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+attrName+\"' is an invalid name.\", getPositionFromMatch(matches[i]));\n    }\n    if (!attrNames.hasOwnProperty(attrName)) {\n      //check for duplicate attribute.\n      attrNames[attrName] = 1;\n    } else {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+attrName+\"' is repeated.\", getPositionFromMatch(matches[i]));\n    }\n  }\n\n  return true;\n}\n\nfunction validateNumberAmpersand(xmlData, i) {\n  let re = /\\d/;\n  if (xmlData[i] === 'x') {\n    i++;\n    re = /[\\da-fA-F]/;\n  }\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] === ';')\n      return i;\n    if (!xmlData[i].match(re))\n      break;\n  }\n  return -1;\n}\n\nfunction validateAmpersand(xmlData, i) {\n  // https://www.w3.org/TR/xml/#dt-charref\n  i++;\n  if (xmlData[i] === ';')\n    return -1;\n  if (xmlData[i] === '#') {\n    i++;\n    return validateNumberAmpersand(xmlData, i);\n  }\n  let count = 0;\n  for (; i < xmlData.length; i++, count++) {\n    if (xmlData[i].match(/\\w/) && count < 20)\n      continue;\n    if (xmlData[i] === ';')\n      break;\n    return -1;\n  }\n  return i;\n}\n\nfunction getErrorObject(code, message, lineNumber) {\n  return {\n    err: {\n      code: code,\n      msg: message,\n      line: lineNumber.line || lineNumber,\n      col: lineNumber.col,\n    },\n  };\n}\n\nfunction validateAttrName(attrName) {\n  return util.isName(attrName);\n}\n\n// const startsWithXML = /^xml/i;\n\nfunction validateTagName(tagname) {\n  return util.isName(tagname) /* && !tagname.match(startsWithXML) */;\n}\n\n//this function returns the line number for the character at the given index\nfunction getLineNumberForPosition(xmlData, index) {\n  const lines = xmlData.substring(0, index).split(/\\r?\\n/);\n  return {\n    line: lines.length,\n\n    // column number is last line's length + 1, because column numbering starts at 1:\n    col: lines[lines.length - 1].length + 1\n  };\n}\n\n//this function returns the position of the first character of match within attrStr\nfunction getPositionFromMatch(match) {\n  return match.startIndex + match[1].length;\n}\n","'use strict';\n//parse Empty Node as self closing node\nconst buildFromOrderedJs = require('./orderedJs2Xml');\n\nconst defaultOptions = {\n  attributeNamePrefix: '@_',\n  attributesGroupName: false,\n  textNodeName: '#text',\n  ignoreAttributes: true,\n  cdataPropName: false,\n  format: false,\n  indentBy: '  ',\n  suppressEmptyNode: false,\n  suppressUnpairedNode: true,\n  suppressBooleanAttributes: true,\n  tagValueProcessor: function(key, a) {\n    return a;\n  },\n  attributeValueProcessor: function(attrName, a) {\n    return a;\n  },\n  preserveOrder: false,\n  commentPropName: false,\n  unpairedTags: [],\n  entities: [\n    { regex: new RegExp(\"&\", \"g\"), val: \"&amp;\" },//it must be on top\n    { regex: new RegExp(\">\", \"g\"), val: \"&gt;\" },\n    { regex: new RegExp(\"<\", \"g\"), val: \"&lt;\" },\n    { regex: new RegExp(\"\\'\", \"g\"), val: \"&apos;\" },\n    { regex: new RegExp(\"\\\"\", \"g\"), val: \"&quot;\" }\n  ],\n  processEntities: true,\n  stopNodes: [],\n  // transformTagName: false,\n  // transformAttributeName: false,\n  oneListGroup: false\n};\n\nfunction Builder(options) {\n  this.options = Object.assign({}, defaultOptions, options);\n  if (this.options.ignoreAttributes || this.options.attributesGroupName) {\n    this.isAttribute = function(/*a*/) {\n      return false;\n    };\n  } else {\n    this.attrPrefixLen = this.options.attributeNamePrefix.length;\n    this.isAttribute = isAttribute;\n  }\n\n  this.processTextOrObjNode = processTextOrObjNode\n\n  if (this.options.format) {\n    this.indentate = indentate;\n    this.tagEndChar = '>\\n';\n    this.newLine = '\\n';\n  } else {\n    this.indentate = function() {\n      return '';\n    };\n    this.tagEndChar = '>';\n    this.newLine = '';\n  }\n}\n\nBuilder.prototype.build = function(jObj) {\n  if(this.options.preserveOrder){\n    return buildFromOrderedJs(jObj, this.options);\n  }else {\n    if(Array.isArray(jObj) && this.options.arrayNodeName && this.options.arrayNodeName.length > 1){\n      jObj = {\n        [this.options.arrayNodeName] : jObj\n      }\n    }\n    return this.j2x(jObj, 0).val;\n  }\n};\n\nBuilder.prototype.j2x = function(jObj, level) {\n  let attrStr = '';\n  let val = '';\n  for (let key in jObj) {\n    if(!Object.prototype.hasOwnProperty.call(jObj, key)) continue;\n    if (typeof jObj[key] === 'undefined') {\n      // supress undefined node only if it is not an attribute\n      if (this.isAttribute(key)) {\n        val += '';\n      }\n    } else if (jObj[key] === null) {\n      // null attribute should be ignored by the attribute list, but should not cause the tag closing\n      if (this.isAttribute(key)) {\n        val += '';\n      } else if (key[0] === '?') {\n        val += this.indentate(level) + '<' + key + '?' + this.tagEndChar;\n      } else {\n        val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n      }\n      // val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n    } else if (jObj[key] instanceof Date) {\n      val += this.buildTextValNode(jObj[key], key, '', level);\n    } else if (typeof jObj[key] !== 'object') {\n      //premitive type\n      const attr = this.isAttribute(key);\n      if (attr) {\n        attrStr += this.buildAttrPairStr(attr, '' + jObj[key]);\n      }else {\n        //tag value\n        if (key === this.options.textNodeName) {\n          let newval = this.options.tagValueProcessor(key, '' + jObj[key]);\n          val += this.replaceEntitiesValue(newval);\n        } else {\n          val += this.buildTextValNode(jObj[key], key, '', level);\n        }\n      }\n    } else if (Array.isArray(jObj[key])) {\n      //repeated nodes\n      const arrLen = jObj[key].length;\n      let listTagVal = \"\";\n      for (let j = 0; j < arrLen; j++) {\n        const item = jObj[key][j];\n        if (typeof item === 'undefined') {\n          // supress undefined node\n        } else if (item === null) {\n          if(key[0] === \"?\") val += this.indentate(level) + '<' + key + '?' + this.tagEndChar;\n          else val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n          // val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n        } else if (typeof item === 'object') {\n          if(this.options.oneListGroup ){\n            listTagVal += this.j2x(item, level + 1).val;\n          }else{\n            listTagVal += this.processTextOrObjNode(item, key, level)\n          }\n        } else {\n          listTagVal += this.buildTextValNode(item, key, '', level);\n        }\n      }\n      if(this.options.oneListGroup){\n        listTagVal = this.buildObjectNode(listTagVal, key, '', level);\n      }\n      val += listTagVal;\n    } else {\n      //nested node\n      if (this.options.attributesGroupName && key === this.options.attributesGroupName) {\n        const Ks = Object.keys(jObj[key]);\n        const L = Ks.length;\n        for (let j = 0; j < L; j++) {\n          attrStr += this.buildAttrPairStr(Ks[j], '' + jObj[key][Ks[j]]);\n        }\n      } else {\n        val += this.processTextOrObjNode(jObj[key], key, level)\n      }\n    }\n  }\n  return {attrStr: attrStr, val: val};\n};\n\nBuilder.prototype.buildAttrPairStr = function(attrName, val){\n  val = this.options.attributeValueProcessor(attrName, '' + val);\n  val = this.replaceEntitiesValue(val);\n  if (this.options.suppressBooleanAttributes && val === \"true\") {\n    return ' ' + attrName;\n  } else return ' ' + attrName + '=\"' + val + '\"';\n}\n\nfunction processTextOrObjNode (object, key, level) {\n  const result = this.j2x(object, level + 1);\n  if (object[this.options.textNodeName] !== undefined && Object.keys(object).length === 1) {\n    return this.buildTextValNode(object[this.options.textNodeName], key, result.attrStr, level);\n  } else {\n    return this.buildObjectNode(result.val, key, result.attrStr, level);\n  }\n}\n\nBuilder.prototype.buildObjectNode = function(val, key, attrStr, level) {\n  if(val === \"\"){\n    if(key[0] === \"?\") return  this.indentate(level) + '<' + key + attrStr+ '?' + this.tagEndChar;\n    else {\n      return this.indentate(level) + '<' + key + attrStr + this.closeTag(key) + this.tagEndChar;\n    }\n  }else{\n\n    let tagEndExp = '</' + key + this.tagEndChar;\n    let piClosingChar = \"\";\n    \n    if(key[0] === \"?\") {\n      piClosingChar = \"?\";\n      tagEndExp = \"\";\n    }\n  \n    // attrStr is an empty string in case the attribute came as undefined or null\n    if ((attrStr || attrStr === '') && val.indexOf('<') === -1) {\n      return ( this.indentate(level) + '<' +  key + attrStr + piClosingChar + '>' + val + tagEndExp );\n    } else if (this.options.commentPropName !== false && key === this.options.commentPropName && piClosingChar.length === 0) {\n      return this.indentate(level) + `<!--${val}-->` + this.newLine;\n    }else {\n      return (\n        this.indentate(level) + '<' + key + attrStr + piClosingChar + this.tagEndChar +\n        val +\n        this.indentate(level) + tagEndExp    );\n    }\n  }\n}\n\nBuilder.prototype.closeTag = function(key){\n  let closeTag = \"\";\n  if(this.options.unpairedTags.indexOf(key) !== -1){ //unpaired\n    if(!this.options.suppressUnpairedNode) closeTag = \"/\"\n  }else if(this.options.suppressEmptyNode){ //empty\n    closeTag = \"/\";\n  }else{\n    closeTag = `></${key}`\n  }\n  return closeTag;\n}\n\nfunction buildEmptyObjNode(val, key, attrStr, level) {\n  if (val !== '') {\n    return this.buildObjectNode(val, key, attrStr, level);\n  } else {\n    if(key[0] === \"?\") return  this.indentate(level) + '<' + key + attrStr+ '?' + this.tagEndChar;\n    else {\n      return  this.indentate(level) + '<' + key + attrStr + '/' + this.tagEndChar;\n      // return this.buildTagStr(level,key, attrStr);\n    }\n  }\n}\n\nBuilder.prototype.buildTextValNode = function(val, key, attrStr, level) {\n  if (this.options.cdataPropName !== false && key === this.options.cdataPropName) {\n    return this.indentate(level) + `<![CDATA[${val}]]>` +  this.newLine;\n  }else if (this.options.commentPropName !== false && key === this.options.commentPropName) {\n    return this.indentate(level) + `<!--${val}-->` +  this.newLine;\n  }else if(key[0] === \"?\") {//PI tag\n    return  this.indentate(level) + '<' + key + attrStr+ '?' + this.tagEndChar; \n  }else{\n    let textValue = this.options.tagValueProcessor(key, val);\n    textValue = this.replaceEntitiesValue(textValue);\n  \n    if( textValue === ''){\n      return this.indentate(level) + '<' + key + attrStr + this.closeTag(key) + this.tagEndChar;\n    }else{\n      return this.indentate(level) + '<' + key + attrStr + '>' +\n         textValue +\n        '</' + key + this.tagEndChar;\n    }\n  }\n}\n\nBuilder.prototype.replaceEntitiesValue = function(textValue){\n  if(textValue && textValue.length > 0 && this.options.processEntities){\n    for (let i=0; i<this.options.entities.length; i++) {\n      const entity = this.options.entities[i];\n      textValue = textValue.replace(entity.regex, entity.val);\n    }\n  }\n  return textValue;\n}\n\nfunction indentate(level) {\n  return this.options.indentBy.repeat(level);\n}\n\nfunction isAttribute(name /*, options*/) {\n  if (name.startsWith(this.options.attributeNamePrefix) && name !== this.options.textNodeName) {\n    return name.substr(this.attrPrefixLen);\n  } else {\n    return false;\n  }\n}\n\nmodule.exports = Builder;\n","const EOL = \"\\n\";\n\n/**\n * \n * @param {array} jArray \n * @param {any} options \n * @returns \n */\nfunction toXml(jArray, options) {\n    let indentation = \"\";\n    if (options.format && options.indentBy.length > 0) {\n        indentation = EOL;\n    }\n    return arrToStr(jArray, options, \"\", indentation);\n}\n\nfunction arrToStr(arr, options, jPath, indentation) {\n    let xmlStr = \"\";\n    let isPreviousElementTag = false;\n\n    for (let i = 0; i < arr.length; i++) {\n        const tagObj = arr[i];\n        const tagName = propName(tagObj);\n        if(tagName === undefined) continue;\n\n        let newJPath = \"\";\n        if (jPath.length === 0) newJPath = tagName\n        else newJPath = `${jPath}.${tagName}`;\n\n        if (tagName === options.textNodeName) {\n            let tagText = tagObj[tagName];\n            if (!isStopNode(newJPath, options)) {\n                tagText = options.tagValueProcessor(tagName, tagText);\n                tagText = replaceEntitiesValue(tagText, options);\n            }\n            if (isPreviousElementTag) {\n                xmlStr += indentation;\n            }\n            xmlStr += tagText;\n            isPreviousElementTag = false;\n            continue;\n        } else if (tagName === options.cdataPropName) {\n            if (isPreviousElementTag) {\n                xmlStr += indentation;\n            }\n            xmlStr += `<![CDATA[${tagObj[tagName][0][options.textNodeName]}]]>`;\n            isPreviousElementTag = false;\n            continue;\n        } else if (tagName === options.commentPropName) {\n            xmlStr += indentation + `<!--${tagObj[tagName][0][options.textNodeName]}-->`;\n            isPreviousElementTag = true;\n            continue;\n        } else if (tagName[0] === \"?\") {\n            const attStr = attr_to_str(tagObj[\":@\"], options);\n            const tempInd = tagName === \"?xml\" ? \"\" : indentation;\n            let piTextNodeName = tagObj[tagName][0][options.textNodeName];\n            piTextNodeName = piTextNodeName.length !== 0 ? \" \" + piTextNodeName : \"\"; //remove extra spacing\n            xmlStr += tempInd + `<${tagName}${piTextNodeName}${attStr}?>`;\n            isPreviousElementTag = true;\n            continue;\n        }\n        let newIdentation = indentation;\n        if (newIdentation !== \"\") {\n            newIdentation += options.indentBy;\n        }\n        const attStr = attr_to_str(tagObj[\":@\"], options);\n        const tagStart = indentation + `<${tagName}${attStr}`;\n        const tagValue = arrToStr(tagObj[tagName], options, newJPath, newIdentation);\n        if (options.unpairedTags.indexOf(tagName) !== -1) {\n            if (options.suppressUnpairedNode) xmlStr += tagStart + \">\";\n            else xmlStr += tagStart + \"/>\";\n        } else if ((!tagValue || tagValue.length === 0) && options.suppressEmptyNode) {\n            xmlStr += tagStart + \"/>\";\n        } else if (tagValue && tagValue.endsWith(\">\")) {\n            xmlStr += tagStart + `>${tagValue}${indentation}</${tagName}>`;\n        } else {\n            xmlStr += tagStart + \">\";\n            if (tagValue && indentation !== \"\" && (tagValue.includes(\"/>\") || tagValue.includes(\"</\"))) {\n                xmlStr += indentation + options.indentBy + tagValue + indentation;\n            } else {\n                xmlStr += tagValue;\n            }\n            xmlStr += `</${tagName}>`;\n        }\n        isPreviousElementTag = true;\n    }\n\n    return xmlStr;\n}\n\nfunction propName(obj) {\n    const keys = Object.keys(obj);\n    for (let i = 0; i < keys.length; i++) {\n        const key = keys[i];\n        if(!obj.hasOwnProperty(key)) continue;\n        if (key !== \":@\") return key;\n    }\n}\n\nfunction attr_to_str(attrMap, options) {\n    let attrStr = \"\";\n    if (attrMap && !options.ignoreAttributes) {\n        for (let attr in attrMap) {\n            if(!attrMap.hasOwnProperty(attr)) continue;\n            let attrVal = options.attributeValueProcessor(attr, attrMap[attr]);\n            attrVal = replaceEntitiesValue(attrVal, options);\n            if (attrVal === true && options.suppressBooleanAttributes) {\n                attrStr += ` ${attr.substr(options.attributeNamePrefix.length)}`;\n            } else {\n                attrStr += ` ${attr.substr(options.attributeNamePrefix.length)}=\"${attrVal}\"`;\n            }\n        }\n    }\n    return attrStr;\n}\n\nfunction isStopNode(jPath, options) {\n    jPath = jPath.substr(0, jPath.length - options.textNodeName.length - 1);\n    let tagName = jPath.substr(jPath.lastIndexOf(\".\") + 1);\n    for (let index in options.stopNodes) {\n        if (options.stopNodes[index] === jPath || options.stopNodes[index] === \"*.\" + tagName) return true;\n    }\n    return false;\n}\n\nfunction replaceEntitiesValue(textValue, options) {\n    if (textValue && textValue.length > 0 && options.processEntities) {\n        for (let i = 0; i < options.entities.length; i++) {\n            const entity = options.entities[i];\n            textValue = textValue.replace(entity.regex, entity.val);\n        }\n    }\n    return textValue;\n}\nmodule.exports = toXml;\n","const util = require('../util');\n\n//TODO: handle comments\nfunction readDocType(xmlData, i){\n    \n    const entities = {};\n    if( xmlData[i + 3] === 'O' &&\n         xmlData[i + 4] === 'C' &&\n         xmlData[i + 5] === 'T' &&\n         xmlData[i + 6] === 'Y' &&\n         xmlData[i + 7] === 'P' &&\n         xmlData[i + 8] === 'E')\n    {    \n        i = i+9;\n        let angleBracketsCount = 1;\n        let hasBody = false, comment = false;\n        let exp = \"\";\n        for(;i<xmlData.length;i++){\n            if (xmlData[i] === '<' && !comment) { //Determine the tag type\n                if( hasBody && isEntity(xmlData, i)){\n                    i += 7; \n                    [entityName, val,i] = readEntityExp(xmlData,i+1);\n                    if(val.indexOf(\"&\") === -1) //Parameter entities are not supported\n                        entities[ validateEntityName(entityName) ] = {\n                            regx : RegExp( `&${entityName};`,\"g\"),\n                            val: val\n                        };\n                }\n                else if( hasBody && isElement(xmlData, i))  i += 8;//Not supported\n                else if( hasBody && isAttlist(xmlData, i))  i += 8;//Not supported\n                else if( hasBody && isNotation(xmlData, i)) i += 9;//Not supported\n                else if( isComment)                         comment = true;\n                else                                        throw new Error(\"Invalid DOCTYPE\");\n\n                angleBracketsCount++;\n                exp = \"\";\n            } else if (xmlData[i] === '>') { //Read tag content\n                if(comment){\n                    if( xmlData[i - 1] === \"-\" && xmlData[i - 2] === \"-\"){\n                        comment = false;\n                        angleBracketsCount--;\n                    }\n                }else{\n                    angleBracketsCount--;\n                }\n                if (angleBracketsCount === 0) {\n                  break;\n                }\n            }else if( xmlData[i] === '['){\n                hasBody = true;\n            }else{\n                exp += xmlData[i];\n            }\n        }\n        if(angleBracketsCount !== 0){\n            throw new Error(`Unclosed DOCTYPE`);\n        }\n    }else{\n        throw new Error(`Invalid Tag instead of DOCTYPE`);\n    }\n    return {entities, i};\n}\n\nfunction readEntityExp(xmlData,i){\n    //External entities are not supported\n    //    <!ENTITY ext SYSTEM \"http://normal-website.com\" >\n\n    //Parameter entities are not supported\n    //    <!ENTITY entityname \"&anotherElement;\">\n\n    //Internal entities are supported\n    //    <!ENTITY entityname \"replacement text\">\n    \n    //read EntityName\n    let entityName = \"\";\n    for (; i < xmlData.length && (xmlData[i] !== \"'\" && xmlData[i] !== '\"' ); i++) {\n        // if(xmlData[i] === \" \") continue;\n        // else \n        entityName += xmlData[i];\n    }\n    entityName = entityName.trim();\n    if(entityName.indexOf(\" \") !== -1) throw new Error(\"External entites are not supported\");\n\n    //read Entity Value\n    const startChar = xmlData[i++];\n    let val = \"\"\n    for (; i < xmlData.length && xmlData[i] !== startChar ; i++) {\n        val += xmlData[i];\n    }\n    return [entityName, val, i];\n}\n\nfunction isComment(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === '-' &&\n    xmlData[i+3] === '-') return true\n    return false\n}\nfunction isEntity(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === 'E' &&\n    xmlData[i+3] === 'N' &&\n    xmlData[i+4] === 'T' &&\n    xmlData[i+5] === 'I' &&\n    xmlData[i+6] === 'T' &&\n    xmlData[i+7] === 'Y') return true\n    return false\n}\nfunction isElement(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === 'E' &&\n    xmlData[i+3] === 'L' &&\n    xmlData[i+4] === 'E' &&\n    xmlData[i+5] === 'M' &&\n    xmlData[i+6] === 'E' &&\n    xmlData[i+7] === 'N' &&\n    xmlData[i+8] === 'T') return true\n    return false\n}\n\nfunction isAttlist(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === 'A' &&\n    xmlData[i+3] === 'T' &&\n    xmlData[i+4] === 'T' &&\n    xmlData[i+5] === 'L' &&\n    xmlData[i+6] === 'I' &&\n    xmlData[i+7] === 'S' &&\n    xmlData[i+8] === 'T') return true\n    return false\n}\nfunction isNotation(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === 'N' &&\n    xmlData[i+3] === 'O' &&\n    xmlData[i+4] === 'T' &&\n    xmlData[i+5] === 'A' &&\n    xmlData[i+6] === 'T' &&\n    xmlData[i+7] === 'I' &&\n    xmlData[i+8] === 'O' &&\n    xmlData[i+9] === 'N') return true\n    return false\n}\n\nfunction validateEntityName(name){\n    if (util.isName(name))\n\treturn name;\n    else\n        throw new Error(`Invalid entity name ${name}`);\n}\n\nmodule.exports = readDocType;\n","\nconst defaultOptions = {\n    preserveOrder: false,\n    attributeNamePrefix: '@_',\n    attributesGroupName: false,\n    textNodeName: '#text',\n    ignoreAttributes: true,\n    removeNSPrefix: false, // remove NS from tag name or attribute name if true\n    allowBooleanAttributes: false, //a tag can have attributes without any value\n    //ignoreRootElement : false,\n    parseTagValue: true,\n    parseAttributeValue: false,\n    trimValues: true, //Trim string values of tag and attributes\n    cdataPropName: false,\n    numberParseOptions: {\n      hex: true,\n      leadingZeros: true,\n      eNotation: true\n    },\n    tagValueProcessor: function(tagName, val) {\n      return val;\n    },\n    attributeValueProcessor: function(attrName, val) {\n      return val;\n    },\n    stopNodes: [], //nested tags will not be parsed even for errors\n    alwaysCreateTextNode: false,\n    isArray: () => false,\n    commentPropName: false,\n    unpairedTags: [],\n    processEntities: true,\n    htmlEntities: false,\n    ignoreDeclaration: false,\n    ignorePiTags: false,\n    transformTagName: false,\n    transformAttributeName: false,\n    updateTag: function(tagName, jPath, attrs){\n      return tagName\n    },\n    // skipEmptyListItem: false\n};\n   \nconst buildOptions = function(options) {\n    return Object.assign({}, defaultOptions, options);\n};\n\nexports.buildOptions = buildOptions;\nexports.defaultOptions = defaultOptions;","'use strict';\n///@ts-check\n\nconst util = require('../util');\nconst xmlNode = require('./xmlNode');\nconst readDocType = require(\"./DocTypeReader\");\nconst toNumber = require(\"strnum\");\n\nconst regx =\n  '<((!\\\\[CDATA\\\\[([\\\\s\\\\S]*?)(]]>))|((NAME:)?(NAME))([^>]*)>|((\\\\/)(NAME)\\\\s*>))([^<]*)'\n  .replace(/NAME/g, util.nameRegexp);\n\n//const tagsRegx = new RegExp(\"<(\\\\/?[\\\\w:\\\\-\\._]+)([^>]*)>(\\\\s*\"+cdataRegx+\")*([^<]+)?\",\"g\");\n//const tagsRegx = new RegExp(\"<(\\\\/?)((\\\\w*:)?([\\\\w:\\\\-\\._]+))([^>]*)>([^<]*)(\"+cdataRegx+\"([^<]*))*([^<]+)?\",\"g\");\n\nclass OrderedObjParser{\n  constructor(options){\n    this.options = options;\n    this.currentNode = null;\n    this.tagsNodeStack = [];\n    this.docTypeEntities = {};\n    this.lastEntities = {\n      \"apos\" : { regex: /&(apos|#39|#x27);/g, val : \"'\"},\n      \"gt\" : { regex: /&(gt|#62|#x3E);/g, val : \">\"},\n      \"lt\" : { regex: /&(lt|#60|#x3C);/g, val : \"<\"},\n      \"quot\" : { regex: /&(quot|#34|#x22);/g, val : \"\\\"\"},\n    };\n    this.ampEntity = { regex: /&(amp|#38|#x26);/g, val : \"&\"};\n    this.htmlEntities = {\n      \"space\": { regex: /&(nbsp|#160);/g, val: \" \" },\n      // \"lt\" : { regex: /&(lt|#60);/g, val: \"<\" },\n      // \"gt\" : { regex: /&(gt|#62);/g, val: \">\" },\n      // \"amp\" : { regex: /&(amp|#38);/g, val: \"&\" },\n      // \"quot\" : { regex: /&(quot|#34);/g, val: \"\\\"\" },\n      // \"apos\" : { regex: /&(apos|#39);/g, val: \"'\" },\n      \"cent\" : { regex: /&(cent|#162);/g, val: \"¢\" },\n      \"pound\" : { regex: /&(pound|#163);/g, val: \"£\" },\n      \"yen\" : { regex: /&(yen|#165);/g, val: \"¥\" },\n      \"euro\" : { regex: /&(euro|#8364);/g, val: \"€\" },\n      \"copyright\" : { regex: /&(copy|#169);/g, val: \"©\" },\n      \"reg\" : { regex: /&(reg|#174);/g, val: \"®\" },\n      \"inr\" : { regex: /&(inr|#8377);/g, val: \"₹\" },\n    };\n    this.addExternalEntities = addExternalEntities;\n    this.parseXml = parseXml;\n    this.parseTextData = parseTextData;\n    this.resolveNameSpace = resolveNameSpace;\n    this.buildAttributesMap = buildAttributesMap;\n    this.isItStopNode = isItStopNode;\n    this.replaceEntitiesValue = replaceEntitiesValue;\n    this.readStopNodeData = readStopNodeData;\n    this.saveTextToParentTag = saveTextToParentTag;\n    this.addChild = addChild;\n  }\n\n}\n\nfunction addExternalEntities(externalEntities){\n  const entKeys = Object.keys(externalEntities);\n  for (let i = 0; i < entKeys.length; i++) {\n    const ent = entKeys[i];\n    this.lastEntities[ent] = {\n       regex: new RegExp(\"&\"+ent+\";\",\"g\"),\n       val : externalEntities[ent]\n    }\n  }\n}\n\n/**\n * @param {string} val\n * @param {string} tagName\n * @param {string} jPath\n * @param {boolean} dontTrim\n * @param {boolean} hasAttributes\n * @param {boolean} isLeafNode\n * @param {boolean} escapeEntities\n */\nfunction parseTextData(val, tagName, jPath, dontTrim, hasAttributes, isLeafNode, escapeEntities) {\n  if (val !== undefined) {\n    if (this.options.trimValues && !dontTrim) {\n      val = val.trim();\n    }\n    if(val.length > 0){\n      if(!escapeEntities) val = this.replaceEntitiesValue(val);\n      \n      const newval = this.options.tagValueProcessor(tagName, val, jPath, hasAttributes, isLeafNode);\n      if(newval === null || newval === undefined){\n        //don't parse\n        return val;\n      }else if(typeof newval !== typeof val || newval !== val){\n        //overwrite\n        return newval;\n      }else if(this.options.trimValues){\n        return parseValue(val, this.options.parseTagValue, this.options.numberParseOptions);\n      }else{\n        const trimmedVal = val.trim();\n        if(trimmedVal === val){\n          return parseValue(val, this.options.parseTagValue, this.options.numberParseOptions);\n        }else{\n          return val;\n        }\n      }\n    }\n  }\n}\n\nfunction resolveNameSpace(tagname) {\n  if (this.options.removeNSPrefix) {\n    const tags = tagname.split(':');\n    const prefix = tagname.charAt(0) === '/' ? '/' : '';\n    if (tags[0] === 'xmlns') {\n      return '';\n    }\n    if (tags.length === 2) {\n      tagname = prefix + tags[1];\n    }\n  }\n  return tagname;\n}\n\n//TODO: change regex to capture NS\n//const attrsRegx = new RegExp(\"([\\\\w\\\\-\\\\.\\\\:]+)\\\\s*=\\\\s*(['\\\"])((.|\\n)*?)\\\\2\",\"gm\");\nconst attrsRegx = new RegExp('([^\\\\s=]+)\\\\s*(=\\\\s*([\\'\"])([\\\\s\\\\S]*?)\\\\3)?', 'gm');\n\nfunction buildAttributesMap(attrStr, jPath, tagName) {\n  if (!this.options.ignoreAttributes && typeof attrStr === 'string') {\n    // attrStr = attrStr.replace(/\\r?\\n/g, ' ');\n    //attrStr = attrStr || attrStr.trim();\n\n    const matches = util.getAllMatches(attrStr, attrsRegx);\n    const len = matches.length; //don't make it inline\n    const attrs = {};\n    for (let i = 0; i < len; i++) {\n      const attrName = this.resolveNameSpace(matches[i][1]);\n      let oldVal = matches[i][4];\n      let aName = this.options.attributeNamePrefix + attrName;\n      if (attrName.length) {\n        if (this.options.transformAttributeName) {\n          aName = this.options.transformAttributeName(aName);\n        }\n        if(aName === \"__proto__\") aName  = \"#__proto__\";\n        if (oldVal !== undefined) {\n          if (this.options.trimValues) {\n            oldVal = oldVal.trim();\n          }\n          oldVal = this.replaceEntitiesValue(oldVal);\n          const newVal = this.options.attributeValueProcessor(attrName, oldVal, jPath);\n          if(newVal === null || newVal === undefined){\n            //don't parse\n            attrs[aName] = oldVal;\n          }else if(typeof newVal !== typeof oldVal || newVal !== oldVal){\n            //overwrite\n            attrs[aName] = newVal;\n          }else{\n            //parse\n            attrs[aName] = parseValue(\n              oldVal,\n              this.options.parseAttributeValue,\n              this.options.numberParseOptions\n            );\n          }\n        } else if (this.options.allowBooleanAttributes) {\n          attrs[aName] = true;\n        }\n      }\n    }\n    if (!Object.keys(attrs).length) {\n      return;\n    }\n    if (this.options.attributesGroupName) {\n      const attrCollection = {};\n      attrCollection[this.options.attributesGroupName] = attrs;\n      return attrCollection;\n    }\n    return attrs\n  }\n}\n\nconst parseXml = function(xmlData) {\n  xmlData = xmlData.replace(/\\r\\n?/g, \"\\n\"); //TODO: remove this line\n  const xmlObj = new xmlNode('!xml');\n  let currentNode = xmlObj;\n  let textData = \"\";\n  let jPath = \"\";\n  for(let i=0; i< xmlData.length; i++){//for each char in XML data\n    const ch = xmlData[i];\n    if(ch === '<'){\n      // const nextIndex = i+1;\n      // const _2ndChar = xmlData[nextIndex];\n      if( xmlData[i+1] === '/') {//Closing Tag\n        const closeIndex = findClosingIndex(xmlData, \">\", i, \"Closing Tag is not closed.\")\n        let tagName = xmlData.substring(i+2,closeIndex).trim();\n\n        if(this.options.removeNSPrefix){\n          const colonIndex = tagName.indexOf(\":\");\n          if(colonIndex !== -1){\n            tagName = tagName.substr(colonIndex+1);\n          }\n        }\n\n        if(this.options.transformTagName) {\n          tagName = this.options.transformTagName(tagName);\n        }\n\n        if(currentNode){\n          textData = this.saveTextToParentTag(textData, currentNode, jPath);\n        }\n\n        //check if last tag of nested tag was unpaired tag\n        const lastTagName = jPath.substring(jPath.lastIndexOf(\".\")+1);\n        if(tagName && this.options.unpairedTags.indexOf(tagName) !== -1 ){\n          throw new Error(`Unpaired tag can not be used as closing tag: </${tagName}>`);\n        }\n        let propIndex = 0\n        if(lastTagName && this.options.unpairedTags.indexOf(lastTagName) !== -1 ){\n          propIndex = jPath.lastIndexOf('.', jPath.lastIndexOf('.')-1)\n          this.tagsNodeStack.pop();\n        }else{\n          propIndex = jPath.lastIndexOf(\".\");\n        }\n        jPath = jPath.substring(0, propIndex);\n\n        currentNode = this.tagsNodeStack.pop();//avoid recursion, set the parent tag scope\n        textData = \"\";\n        i = closeIndex;\n      } else if( xmlData[i+1] === '?') {\n\n        let tagData = readTagExp(xmlData,i, false, \"?>\");\n        if(!tagData) throw new Error(\"Pi Tag is not closed.\");\n\n        textData = this.saveTextToParentTag(textData, currentNode, jPath);\n        if( (this.options.ignoreDeclaration && tagData.tagName === \"?xml\") || this.options.ignorePiTags){\n\n        }else{\n  \n          const childNode = new xmlNode(tagData.tagName);\n          childNode.add(this.options.textNodeName, \"\");\n          \n          if(tagData.tagName !== tagData.tagExp && tagData.attrExpPresent){\n            childNode[\":@\"] = this.buildAttributesMap(tagData.tagExp, jPath, tagData.tagName);\n          }\n          this.addChild(currentNode, childNode, jPath)\n\n        }\n\n\n        i = tagData.closeIndex + 1;\n      } else if(xmlData.substr(i + 1, 3) === '!--') {\n        const endIndex = findClosingIndex(xmlData, \"-->\", i+4, \"Comment is not closed.\")\n        if(this.options.commentPropName){\n          const comment = xmlData.substring(i + 4, endIndex - 2);\n\n          textData = this.saveTextToParentTag(textData, currentNode, jPath);\n\n          currentNode.add(this.options.commentPropName, [ { [this.options.textNodeName] : comment } ]);\n        }\n        i = endIndex;\n      } else if( xmlData.substr(i + 1, 2) === '!D') {\n        const result = readDocType(xmlData, i);\n        this.docTypeEntities = result.entities;\n        i = result.i;\n      }else if(xmlData.substr(i + 1, 2) === '![') {\n        const closeIndex = findClosingIndex(xmlData, \"]]>\", i, \"CDATA is not closed.\") - 2;\n        const tagExp = xmlData.substring(i + 9,closeIndex);\n\n        textData = this.saveTextToParentTag(textData, currentNode, jPath);\n\n        //cdata should be set even if it is 0 length string\n        if(this.options.cdataPropName){\n          // let val = this.parseTextData(tagExp, this.options.cdataPropName, jPath + \".\" + this.options.cdataPropName, true, false, true);\n          // if(!val) val = \"\";\n          currentNode.add(this.options.cdataPropName, [ { [this.options.textNodeName] : tagExp } ]);\n        }else{\n          let val = this.parseTextData(tagExp, currentNode.tagname, jPath, true, false, true);\n          if(val == undefined) val = \"\";\n          currentNode.add(this.options.textNodeName, val);\n        }\n        \n        i = closeIndex + 2;\n      }else {//Opening tag\n        let result = readTagExp(xmlData,i, this.options.removeNSPrefix);\n        let tagName= result.tagName;\n        const rawTagName = result.rawTagName;\n        let tagExp = result.tagExp;\n        let attrExpPresent = result.attrExpPresent;\n        let closeIndex = result.closeIndex;\n\n        if (this.options.transformTagName) {\n          tagName = this.options.transformTagName(tagName);\n        }\n        \n        //save text as child node\n        if (currentNode && textData) {\n          if(currentNode.tagname !== '!xml'){\n            //when nested tag is found\n            textData = this.saveTextToParentTag(textData, currentNode, jPath, false);\n          }\n        }\n\n        //check if last tag was unpaired tag\n        const lastTag = currentNode;\n        if(lastTag && this.options.unpairedTags.indexOf(lastTag.tagname) !== -1 ){\n          currentNode = this.tagsNodeStack.pop();\n          jPath = jPath.substring(0, jPath.lastIndexOf(\".\"));\n        }\n        if(tagName !== xmlObj.tagname){\n          jPath += jPath ? \".\" + tagName : tagName;\n        }\n        if (this.isItStopNode(this.options.stopNodes, jPath, tagName)) {\n          let tagContent = \"\";\n          //self-closing tag\n          if(tagExp.length > 0 && tagExp.lastIndexOf(\"/\") === tagExp.length - 1){\n            i = result.closeIndex;\n          }\n          //unpaired tag\n          else if(this.options.unpairedTags.indexOf(tagName) !== -1){\n            i = result.closeIndex;\n          }\n          //normal tag\n          else{\n            //read until closing tag is found\n            const result = this.readStopNodeData(xmlData, rawTagName, closeIndex + 1);\n            if(!result) throw new Error(`Unexpected end of ${rawTagName}`);\n            i = result.i;\n            tagContent = result.tagContent;\n          }\n\n          const childNode = new xmlNode(tagName);\n          if(tagName !== tagExp && attrExpPresent){\n            childNode[\":@\"] = this.buildAttributesMap(tagExp, jPath, tagName);\n          }\n          if(tagContent) {\n            tagContent = this.parseTextData(tagContent, tagName, jPath, true, attrExpPresent, true, true);\n          }\n          \n          jPath = jPath.substr(0, jPath.lastIndexOf(\".\"));\n          childNode.add(this.options.textNodeName, tagContent);\n          \n          this.addChild(currentNode, childNode, jPath)\n        }else{\n  //selfClosing tag\n          if(tagExp.length > 0 && tagExp.lastIndexOf(\"/\") === tagExp.length - 1){\n            if(tagName[tagName.length - 1] === \"/\"){ //remove trailing '/'\n              tagName = tagName.substr(0, tagName.length - 1);\n              jPath = jPath.substr(0, jPath.length - 1);\n              tagExp = tagName;\n            }else{\n              tagExp = tagExp.substr(0, tagExp.length - 1);\n            }\n            \n            if(this.options.transformTagName) {\n              tagName = this.options.transformTagName(tagName);\n            }\n\n            const childNode = new xmlNode(tagName);\n            if(tagName !== tagExp && attrExpPresent){\n              childNode[\":@\"] = this.buildAttributesMap(tagExp, jPath, tagName);\n            }\n            this.addChild(currentNode, childNode, jPath)\n            jPath = jPath.substr(0, jPath.lastIndexOf(\".\"));\n          }\n    //opening tag\n          else{\n            const childNode = new xmlNode( tagName);\n            this.tagsNodeStack.push(currentNode);\n            \n            if(tagName !== tagExp && attrExpPresent){\n              childNode[\":@\"] = this.buildAttributesMap(tagExp, jPath, tagName);\n            }\n            this.addChild(currentNode, childNode, jPath)\n            currentNode = childNode;\n          }\n          textData = \"\";\n          i = closeIndex;\n        }\n      }\n    }else{\n      textData += xmlData[i];\n    }\n  }\n  return xmlObj.child;\n}\n\nfunction addChild(currentNode, childNode, jPath){\n  const result = this.options.updateTag(childNode.tagname, jPath, childNode[\":@\"])\n  if(result === false){\n  }else if(typeof result === \"string\"){\n    childNode.tagname = result\n    currentNode.addChild(childNode);\n  }else{\n    currentNode.addChild(childNode);\n  }\n}\n\nconst replaceEntitiesValue = function(val){\n\n  if(this.options.processEntities){\n    for(let entityName in this.docTypeEntities){\n      const entity = this.docTypeEntities[entityName];\n      val = val.replace( entity.regx, entity.val);\n    }\n    for(let entityName in this.lastEntities){\n      const entity = this.lastEntities[entityName];\n      val = val.replace( entity.regex, entity.val);\n    }\n    if(this.options.htmlEntities){\n      for(let entityName in this.htmlEntities){\n        const entity = this.htmlEntities[entityName];\n        val = val.replace( entity.regex, entity.val);\n      }\n    }\n    val = val.replace( this.ampEntity.regex, this.ampEntity.val);\n  }\n  return val;\n}\nfunction saveTextToParentTag(textData, currentNode, jPath, isLeafNode) {\n  if (textData) { //store previously collected data as textNode\n    if(isLeafNode === undefined) isLeafNode = Object.keys(currentNode.child).length === 0\n    \n    textData = this.parseTextData(textData,\n      currentNode.tagname,\n      jPath,\n      false,\n      currentNode[\":@\"] ? Object.keys(currentNode[\":@\"]).length !== 0 : false,\n      isLeafNode);\n\n    if (textData !== undefined && textData !== \"\")\n      currentNode.add(this.options.textNodeName, textData);\n    textData = \"\";\n  }\n  return textData;\n}\n\n//TODO: use jPath to simplify the logic\n/**\n * \n * @param {string[]} stopNodes \n * @param {string} jPath\n * @param {string} currentTagName \n */\nfunction isItStopNode(stopNodes, jPath, currentTagName){\n  const allNodesExp = \"*.\" + currentTagName;\n  for (const stopNodePath in stopNodes) {\n    const stopNodeExp = stopNodes[stopNodePath];\n    if( allNodesExp === stopNodeExp || jPath === stopNodeExp  ) return true;\n  }\n  return false;\n}\n\n/**\n * Returns the tag Expression and where it is ending handling single-double quotes situation\n * @param {string} xmlData \n * @param {number} i starting index\n * @returns \n */\nfunction tagExpWithClosingIndex(xmlData, i, closingChar = \">\"){\n  let attrBoundary;\n  let tagExp = \"\";\n  for (let index = i; index < xmlData.length; index++) {\n    let ch = xmlData[index];\n    if (attrBoundary) {\n        if (ch === attrBoundary) attrBoundary = \"\";//reset\n    } else if (ch === '\"' || ch === \"'\") {\n        attrBoundary = ch;\n    } else if (ch === closingChar[0]) {\n      if(closingChar[1]){\n        if(xmlData[index + 1] === closingChar[1]){\n          return {\n            data: tagExp,\n            index: index\n          }\n        }\n      }else{\n        return {\n          data: tagExp,\n          index: index\n        }\n      }\n    } else if (ch === '\\t') {\n      ch = \" \"\n    }\n    tagExp += ch;\n  }\n}\n\nfunction findClosingIndex(xmlData, str, i, errMsg){\n  const closingIndex = xmlData.indexOf(str, i);\n  if(closingIndex === -1){\n    throw new Error(errMsg)\n  }else{\n    return closingIndex + str.length - 1;\n  }\n}\n\nfunction readTagExp(xmlData,i, removeNSPrefix, closingChar = \">\"){\n  const result = tagExpWithClosingIndex(xmlData, i+1, closingChar);\n  if(!result) return;\n  let tagExp = result.data;\n  const closeIndex = result.index;\n  const separatorIndex = tagExp.search(/\\s/);\n  let tagName = tagExp;\n  let attrExpPresent = true;\n  if(separatorIndex !== -1){//separate tag name and attributes expression\n    tagName = tagExp.substr(0, separatorIndex).replace(/\\s\\s*$/, '');\n    tagExp = tagExp.substr(separatorIndex + 1);\n  }\n\n  const rawTagName = tagName;\n  if(removeNSPrefix){\n    const colonIndex = tagName.indexOf(\":\");\n    if(colonIndex !== -1){\n      tagName = tagName.substr(colonIndex+1);\n      attrExpPresent = tagName !== result.data.substr(colonIndex + 1);\n    }\n  }\n\n  return {\n    tagName: tagName,\n    tagExp: tagExp,\n    closeIndex: closeIndex,\n    attrExpPresent: attrExpPresent,\n    rawTagName: rawTagName,\n  }\n}\n/**\n * find paired tag for a stop node\n * @param {string} xmlData \n * @param {string} tagName \n * @param {number} i \n */\nfunction readStopNodeData(xmlData, tagName, i){\n  const startIndex = i;\n  // Starting at 1 since we already have an open tag\n  let openTagCount = 1;\n\n  for (; i < xmlData.length; i++) {\n    if( xmlData[i] === \"<\"){ \n      if (xmlData[i+1] === \"/\") {//close tag\n          const closeIndex = findClosingIndex(xmlData, \">\", i, `${tagName} is not closed`);\n          let closeTagName = xmlData.substring(i+2,closeIndex).trim();\n          if(closeTagName === tagName){\n            openTagCount--;\n            if (openTagCount === 0) {\n              return {\n                tagContent: xmlData.substring(startIndex, i),\n                i : closeIndex\n              }\n            }\n          }\n          i=closeIndex;\n        } else if(xmlData[i+1] === '?') { \n          const closeIndex = findClosingIndex(xmlData, \"?>\", i+1, \"StopNode is not closed.\")\n          i=closeIndex;\n        } else if(xmlData.substr(i + 1, 3) === '!--') { \n          const closeIndex = findClosingIndex(xmlData, \"-->\", i+3, \"StopNode is not closed.\")\n          i=closeIndex;\n        } else if(xmlData.substr(i + 1, 2) === '![') { \n          const closeIndex = findClosingIndex(xmlData, \"]]>\", i, \"StopNode is not closed.\") - 2;\n          i=closeIndex;\n        } else {\n          const tagData = readTagExp(xmlData, i, '>')\n\n          if (tagData) {\n            const openTagName = tagData && tagData.tagName;\n            if (openTagName === tagName && tagData.tagExp[tagData.tagExp.length-1] !== \"/\") {\n              openTagCount++;\n            }\n            i=tagData.closeIndex;\n          }\n        }\n      }\n  }//end for loop\n}\n\nfunction parseValue(val, shouldParse, options) {\n  if (shouldParse && typeof val === 'string') {\n    //console.log(options)\n    const newval = val.trim();\n    if(newval === 'true' ) return true;\n    else if(newval === 'false' ) return false;\n    else return toNumber(val, options);\n  } else {\n    if (util.isExist(val)) {\n      return val;\n    } else {\n      return '';\n    }\n  }\n}\n\n\nmodule.exports = OrderedObjParser;\n","const { buildOptions} = require(\"./OptionsBuilder\");\nconst OrderedObjParser = require(\"./OrderedObjParser\");\nconst { prettify} = require(\"./node2json\");\nconst validator = require('../validator');\n\nclass XMLParser{\n    \n    constructor(options){\n        this.externalEntities = {};\n        this.options = buildOptions(options);\n        \n    }\n    /**\n     * Parse XML dats to JS object \n     * @param {string|Buffer} xmlData \n     * @param {boolean|Object} validationOption \n     */\n    parse(xmlData,validationOption){\n        if(typeof xmlData === \"string\"){\n        }else if( xmlData.toString){\n            xmlData = xmlData.toString();\n        }else{\n            throw new Error(\"XML data is accepted in String or Bytes[] form.\")\n        }\n        if( validationOption){\n            if(validationOption === true) validationOption = {}; //validate with default options\n            \n            const result = validator.validate(xmlData, validationOption);\n            if (result !== true) {\n              throw Error( `${result.err.msg}:${result.err.line}:${result.err.col}` )\n            }\n          }\n        const orderedObjParser = new OrderedObjParser(this.options);\n        orderedObjParser.addExternalEntities(this.externalEntities);\n        const orderedResult = orderedObjParser.parseXml(xmlData);\n        if(this.options.preserveOrder || orderedResult === undefined) return orderedResult;\n        else return prettify(orderedResult, this.options);\n    }\n\n    /**\n     * Add Entity which is not by default supported by this library\n     * @param {string} key \n     * @param {string} value \n     */\n    addEntity(key, value){\n        if(value.indexOf(\"&\") !== -1){\n            throw new Error(\"Entity value can't have '&'\")\n        }else if(key.indexOf(\"&\") !== -1 || key.indexOf(\";\") !== -1){\n            throw new Error(\"An entity must be set without '&' and ';'. Eg. use '#xD' for '&#xD;'\")\n        }else if(value === \"&\"){\n            throw new Error(\"An entity with value '&' is not permitted\");\n        }else{\n            this.externalEntities[key] = value;\n        }\n    }\n}\n\nmodule.exports = XMLParser;","'use strict';\n\n/**\n * \n * @param {array} node \n * @param {any} options \n * @returns \n */\nfunction prettify(node, options){\n  return compress( node, options);\n}\n\n/**\n * \n * @param {array} arr \n * @param {object} options \n * @param {string} jPath \n * @returns object\n */\nfunction compress(arr, options, jPath){\n  let text;\n  const compressedObj = {};\n  for (let i = 0; i < arr.length; i++) {\n    const tagObj = arr[i];\n    const property = propName(tagObj);\n    let newJpath = \"\";\n    if(jPath === undefined) newJpath = property;\n    else newJpath = jPath + \".\" + property;\n\n    if(property === options.textNodeName){\n      if(text === undefined) text = tagObj[property];\n      else text += \"\" + tagObj[property];\n    }else if(property === undefined){\n      continue;\n    }else if(tagObj[property]){\n      \n      let val = compress(tagObj[property], options, newJpath);\n      const isLeaf = isLeafTag(val, options);\n\n      if(tagObj[\":@\"]){\n        assignAttributes( val, tagObj[\":@\"], newJpath, options);\n      }else if(Object.keys(val).length === 1 && val[options.textNodeName] !== undefined && !options.alwaysCreateTextNode){\n        val = val[options.textNodeName];\n      }else if(Object.keys(val).length === 0){\n        if(options.alwaysCreateTextNode) val[options.textNodeName] = \"\";\n        else val = \"\";\n      }\n\n      if(compressedObj[property] !== undefined && compressedObj.hasOwnProperty(property)) {\n        if(!Array.isArray(compressedObj[property])) {\n            compressedObj[property] = [ compressedObj[property] ];\n        }\n        compressedObj[property].push(val);\n      }else{\n        //TODO: if a node is not an array, then check if it should be an array\n        //also determine if it is a leaf node\n        if (options.isArray(property, newJpath, isLeaf )) {\n          compressedObj[property] = [val];\n        }else{\n          compressedObj[property] = val;\n        }\n      }\n    }\n    \n  }\n  // if(text && text.length > 0) compressedObj[options.textNodeName] = text;\n  if(typeof text === \"string\"){\n    if(text.length > 0) compressedObj[options.textNodeName] = text;\n  }else if(text !== undefined) compressedObj[options.textNodeName] = text;\n  return compressedObj;\n}\n\nfunction propName(obj){\n  const keys = Object.keys(obj);\n  for (let i = 0; i < keys.length; i++) {\n    const key = keys[i];\n    if(key !== \":@\") return key;\n  }\n}\n\nfunction assignAttributes(obj, attrMap, jpath, options){\n  if (attrMap) {\n    const keys = Object.keys(attrMap);\n    const len = keys.length; //don't make it inline\n    for (let i = 0; i < len; i++) {\n      const atrrName = keys[i];\n      if (options.isArray(atrrName, jpath + \".\" + atrrName, true, true)) {\n        obj[atrrName] = [ attrMap[atrrName] ];\n      } else {\n        obj[atrrName] = attrMap[atrrName];\n      }\n    }\n  }\n}\n\nfunction isLeafTag(obj, options){\n  const { textNodeName } = options;\n  const propCount = Object.keys(obj).length;\n  \n  if (propCount === 0) {\n    return true;\n  }\n\n  if (\n    propCount === 1 &&\n    (obj[textNodeName] || typeof obj[textNodeName] === \"boolean\" || obj[textNodeName] === 0)\n  ) {\n    return true;\n  }\n\n  return false;\n}\nexports.prettify = prettify;\n","'use strict';\n\nclass XmlNode{\n  constructor(tagname) {\n    this.tagname = tagname;\n    this.child = []; //nested tags, text, cdata, comments in order\n    this[\":@\"] = {}; //attributes map\n  }\n  add(key,val){\n    // this.child.push( {name : key, val: val, isCdata: isCdata });\n    if(key === \"__proto__\") key = \"#__proto__\";\n    this.child.push( {[key]: val });\n  }\n  addChild(node) {\n    if(node.tagname === \"__proto__\") node.tagname = \"#__proto__\";\n    if(node[\":@\"] && Object.keys(node[\":@\"]).length > 0){\n      this.child.push( { [node.tagname]: node.child, [\":@\"]: node[\":@\"] });\n    }else{\n      this.child.push( { [node.tagname]: node.child });\n    }\n  };\n};\n\n\nmodule.exports = XmlNode;","/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n","'use strict';\nconst {XMLParser, XMLValidator} = require('fast-xml-parser');\n\nconst isSvg = input => {\n\tif (input === undefined || input === null) {\n\t\treturn false;\n\t}\n\n\tinput = input.toString().trim();\n\n\tif (input.length === 0) {\n\t\treturn false;\n\t}\n\n\t// Has to be `!==` as it can also return an object with error info.\n\tif (XMLValidator.validate(input) !== true) {\n\t\treturn false;\n\t}\n\n\tlet jsonObject;\n\tconst parser = new XMLParser();\n\n\ttry {\n\t\tjsonObject = parser.parse(input);\n\t} catch (_) {\n\t\treturn false;\n\t}\n\n\tif (!jsonObject) {\n\t\treturn false;\n\t}\n\n\tif (!('svg' in jsonObject)) {\n\t\treturn false;\n\t}\n\n\treturn true;\n};\n\nmodule.exports = isSvg;\n// TODO: Remove this for the next major release\nmodule.exports.default = isSvg;\n","// extracted by mini-css-extract-plugin\nexport {};","// extracted by mini-css-extract-plugin\nexport {};","const hexRegex = /^[-+]?0x[a-fA-F0-9]+$/;\nconst numRegex = /^([\\-\\+])?(0*)(\\.[0-9]+([eE]\\-?[0-9]+)?|[0-9]+(\\.[0-9]+([eE]\\-?[0-9]+)?)?)$/;\n// const octRegex = /0x[a-z0-9]+/;\n// const binRegex = /0x[a-z0-9]+/;\n\n\n//polyfill\nif (!Number.parseInt && window.parseInt) {\n    Number.parseInt = window.parseInt;\n}\nif (!Number.parseFloat && window.parseFloat) {\n    Number.parseFloat = window.parseFloat;\n}\n\n  \nconst consider = {\n    hex :  true,\n    leadingZeros: true,\n    decimalPoint: \"\\.\",\n    eNotation: true\n    //skipLike: /regex/\n};\n\nfunction toNumber(str, options = {}){\n    // const options = Object.assign({}, consider);\n    // if(opt.leadingZeros === false){\n    //     options.leadingZeros = false;\n    // }else if(opt.hex === false){\n    //     options.hex = false;\n    // }\n\n    options = Object.assign({}, consider, options );\n    if(!str || typeof str !== \"string\" ) return str;\n    \n    let trimmedStr  = str.trim();\n    // if(trimmedStr === \"0.0\") return 0;\n    // else if(trimmedStr === \"+0.0\") return 0;\n    // else if(trimmedStr === \"-0.0\") return -0;\n\n    if(options.skipLike !== undefined && options.skipLike.test(trimmedStr)) return str;\n    else if (options.hex && hexRegex.test(trimmedStr)) {\n        return Number.parseInt(trimmedStr, 16);\n    // } else if (options.parseOct && octRegex.test(str)) {\n    //     return Number.parseInt(val, 8);\n    // }else if (options.parseBin && binRegex.test(str)) {\n    //     return Number.parseInt(val, 2);\n    }else{\n        //separate negative sign, leading zeros, and rest number\n        const match = numRegex.exec(trimmedStr);\n        if(match){\n            const sign = match[1];\n            const leadingZeros = match[2];\n            let numTrimmedByZeros = trimZeros(match[3]); //complete num without leading zeros\n            //trim ending zeros for floating number\n            \n            const eNotation = match[4] || match[6];\n            if(!options.leadingZeros && leadingZeros.length > 0 && sign && trimmedStr[2] !== \".\") return str; //-0123\n            else if(!options.leadingZeros && leadingZeros.length > 0 && !sign && trimmedStr[1] !== \".\") return str; //0123\n            else{//no leading zeros or leading zeros are allowed\n                const num = Number(trimmedStr);\n                const numStr = \"\" + num;\n                if(numStr.search(/[eE]/) !== -1){ //given number is long and parsed to eNotation\n                    if(options.eNotation) return num;\n                    else return str;\n                }else if(eNotation){ //given number has enotation\n                    if(options.eNotation) return num;\n                    else return str;\n                }else if(trimmedStr.indexOf(\".\") !== -1){ //floating number\n                    // const decimalPart = match[5].substr(1);\n                    // const intPart = trimmedStr.substr(0,trimmedStr.indexOf(\".\"));\n\n                    \n                    // const p = numStr.indexOf(\".\");\n                    // const givenIntPart = numStr.substr(0,p);\n                    // const givenDecPart = numStr.substr(p+1);\n                    if(numStr === \"0\" && (numTrimmedByZeros === \"\") ) return num; //0.0\n                    else if(numStr === numTrimmedByZeros) return num; //0.456. 0.79000\n                    else if( sign && numStr === \"-\"+numTrimmedByZeros) return num;\n                    else return str;\n                }\n                \n                if(leadingZeros){\n                    // if(numTrimmedByZeros === numStr){\n                    //     if(options.leadingZeros) return num;\n                    //     else return str;\n                    // }else return str;\n                    if(numTrimmedByZeros === numStr) return num;\n                    else if(sign+numTrimmedByZeros === numStr) return num;\n                    else return str;\n                }\n\n                if(trimmedStr === numStr) return num;\n                else if(trimmedStr === sign+numStr) return num;\n                // else{\n                //     //number with +/- sign\n                //     trimmedStr.test(/[-+][0-9]);\n\n                // }\n                return str;\n            }\n            // else if(!eNotation && trimmedStr && trimmedStr !== Number(trimmedStr) ) return str;\n            \n        }else{ //non-numeric string\n            return str;\n        }\n    }\n}\n\n/**\n * \n * @param {string} numStr without leading zeros\n * @returns \n */\nfunction trimZeros(numStr){\n    if(numStr && numStr.indexOf(\".\") !== -1){//float\n        numStr = numStr.replace(/0+$/, \"\"); //remove ending zeros\n        if(numStr === \".\")  numStr = \"0\";\n        else if(numStr[0] === \".\")  numStr = \"0\"+numStr;\n        else if(numStr[numStr.length-1] === \".\")  numStr = numStr.substr(0,numStr.length-1);\n        return numStr;\n    }\n    return numStr;\n}\nmodule.exports = toNumber\n","module.exports = window[\"React\"];","module.exports = window[\"wp\"][\"blockEditor\"];","module.exports = window[\"wp\"][\"blocks\"];","module.exports = window[\"wp\"][\"components\"];","module.exports = window[\"wp\"][\"element\"];","module.exports = window[\"wp\"][\"i18n\"];","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t\"blocks/services-item/index\": 0,\n\t\"blocks/services-item/style-index\": 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = globalThis[\"webpackChunkieeesbtkmce\"] = globalThis[\"webpackChunkieeesbtkmce\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [\"blocks/services-item/style-index\"], () => (__webpack_require__(\"./src/blocks/services-item/index.js\")))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n",""],"names":["icons","colors","name","color","InspectorControls","RichText","useBlockProps","PanelBody","Button","ColorPalette","TextareaControl","__experimentalGrid","Grid","__","sanitizeSVG","Fragment","wp","element","useEffect","Edit","attributes","setAttributes","title","content","icon","blockProps","className","handleSVGChange","newSVG","cleanImage","alert","modifySvg","svgString","parser","DOMParser","doc","parseFromString","documentElement","removeAttribute","elementsWithFill","querySelectorAll","forEach","setAttribute","serializer","XMLSerializer","modifiedSvgString","serializeToString","createElement","value","onChange","columns","map","_icon","onClick","style","height","backgroundColor","src","encodeURIComponent","width","margin","alt","label","help","tagName","allowedFormats","placeholder","registerBlockType","metadata","Save","type","source","selector","default","edit","save","Content"],"sourceRoot":""}